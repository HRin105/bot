
import time
import threading
import logging
import pyautogui
import pytesseract
import cv2
import numpy as np
from PIL import Image
import tkinter as tk
import json
import os
import subprocess
from tkinter import ttk, scrolledtext

# --- Logging ra file ---
from datetime import datetime

# T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a c√≥
if not os.path.exists("logs"):
    os.makedirs("logs")

# ƒê·∫∑t t√™n file log theo ng√†y
log_filename = f"logs/bot_log_{datetime.now().strftime('%Y-%m-%d')}.txt"

# Ghi log ra file + console (ch·ªâ c·∫•u h√¨nh 1 l·∫ßn)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === C·∫•u h√¨nh chung ===
pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
TESSERACT_LANG = 'vie'
DRY_RUN = False

# --- C·∫•u h√¨nh th·ªùi gian ch·ªù (gi√¢y) - theo y√™u c·∫ßu: 10s / 8s ---
DELAY_AFTER_BET = 10        # Sau khi c∆∞·ª£c xong, ch·ªù k·∫øt qu·∫£
DELAY_AFTER_WIN_WAIT = 24   # Sau khi TH·∫ÆNG trong ch·∫ø ƒë·ªô ch·ªù, ƒë·ª£i Telegram l√†m m·ªõi

# --- V√ôNG SCAN TELEGRAM (c·∫ßn ch·ªânh theo m√°y b·∫°n) ---
TELE_REGION = (28, 989, 197, 82)

# --- T·ªåA ƒê·ªò C·ªê ƒê·ªäNH (m·∫∑c ƒë·ªãnh; c√≥ th·ªÉ ch·ªânh trong GUI) ---
BTN_LON_POS = (623, 837)
BTN_NHO_POS = (804, 837)
BET_BOX_POS = (757, 958)
BTN_GUI_POS = (731, 1089)
TELE_CLICK_POS = (428, 1032)   # click focus Telegram b√™n tr√°i
TELE_CLOSE_POS = (1135, 592)   # click ƒë√≥ng c∆∞·ª£c b√™n ph·∫£i

# --- D√£y h·ªá s·ªë ---
BET_LEVELS = [1000, 2000, 4000, 8000, 17000, 34000, 68000]
bet_index = 0
bot_running = False

# === OCR ===
def get_text_from_region(region):
    im = pyautogui.screenshot(region=region)
    im = im.convert('RGB')
    arr = np.array(im)
    gray = cv2.cvtColor(arr, cv2.COLOR_BGR2GRAY)
    _, th = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    pil = Image.fromarray(th)
    config = '--psm 6'
    try:
        text = pytesseract.image_to_string(pil, lang=TESSERACT_LANG, config=config)
    except Exception as e:
        logging.error("OCR error: %s", e)
        text = ""
    return text.strip().upper()

# === CLICK TO·∫† ƒê·ªò ===
def click_at(pos, desc="v·ªã tr√≠"):
    # logging.info(f"Click {desc} t·∫°i {pos}")
    if not DRY_RUN:
        pyautogui.moveTo(pos[0], pos[1], duration=0.15)
        pyautogui.click()
        time.sleep(0.3)

# === NH·∫¨P H·ªÜ S·ªê + G·ª¨I + ƒê√ìNG C∆Ø·ª¢C ===
def input_bet_and_send(amount):
    # logging.info(f"Nh·∫≠p h·ªá s·ªë {amount} v√† g·ª≠i")
    if not DRY_RUN:
        click_at(BET_BOX_POS, "√¥ BET")
        pyautogui.hotkey('ctrl', 'a')
        pyautogui.press('backspace')
        pyautogui.typewrite(str(amount))
        time.sleep(0.3)
        click_at(BTN_GUI_POS, "n√∫t G·ª¨I")
        time.sleep(0.5)
        click_at(TELE_CLOSE_POS, "n√∫t ƒê√ìNG C∆Ø·ª¢C")
        time.sleep(0.3)
        click_telegram()  # ‚úÖ focus Telegram lu√¥n ·ªü ƒë√¢y

# === ƒê√ÅNH L·ªöN / NH·ªé (Ctrl+R + click l·∫°i) ===
def perform_click(prediction, amount):
    if prediction == "LON":
        click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 1)")
        pyautogui.hotkey('ctrl', 'r')  # reload
        time.sleep(3)
        click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 2)")
    elif prediction == "NHO":
        click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 1)")
        pyautogui.hotkey('ctrl', 'r')
        time.sleep(3)
        click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 2)")
    input_bet_and_send(amount)

# === CLICK TELEGRAM ===
def click_telegram():
    click_at(TELE_CLICK_POS, "Telegram b√™n tr√°i")

# === MAIN LOGIC ===
def bot_loop(status_label, bet_label, log_box):
    global bet_index, bot_running
    last_prediction = None
    waiting_for_win = False  # sau khi THUA, ch·ªù TH·∫ÆNG k·∫ø ti·∫øp r·ªìi m·ªõi +1 h·ªá s·ªë

    def log_msg(msg):
        log_box.insert(tk.END, msg + "\n")
        log_box.see(tk.END)
        logging.info(msg)

    status_label.config(text="üîÑ ƒêang ch·∫°y...")

    while bot_running:
        click_telegram()  # ƒë·∫£m b·∫£o focus Telegram
        text = get_text_from_region(TELE_REGION)
        text = text.replace('\n', ' ')
        # log_msg(f"OCR: {text}")

        # === K·∫æT QU·∫¢ XU·∫§T HI·ªÜN ===
        if "TH·∫ÆNG" in text:
            if waiting_for_win:
                # Giai ƒëo·∫°n 3: TH·∫ÆNG d√πng l√†m "t√≠n hi·ªáu" ƒë·ªÉ +1 h·ªá s·ªë, KH√îNG reset
                if bet_index < len(BET_LEVELS) - 1:
                    bet_index += 1
                log_msg(f"‚úÖ TH·∫ÆNG (trong ch·∫ø ƒë·ªô ch·ªù) ‚Üí tƒÉng h·ªá s·ªë l√™n {BET_LEVELS[bet_index]}")
                waiting_for_win = False
                last_prediction = None  # cho ph√©p ƒë√°nh l·∫°i v√≤ng m·ªõi

                # üî∏ Delay Telegram ƒë·ªÉ tr√°nh ƒë·ªçc l·∫°i tin c≈©
                for i in range(DELAY_AFTER_WIN_WAIT, 0, -1):
                    status_label.config(text=f"‚è≥ Ch·ªù Telegram c·∫≠p nh·∫≠t... {i}s")
                    root = status_label.winfo_toplevel()
                    root.update()
                    time.sleep(1)
                continue

            else:
                # Giai ƒëo·∫°n 2: TH·∫ÆNG b√¨nh th∆∞·ªùng ‚Üí reset v·ªÅ 1000
                log_msg("‚úÖ TH·∫ÆNG - reset h·ªá s·ªë v·ªÅ 1000")
                bet_index = 0
                last_prediction = None
                time.sleep(22)
                continue

        if "THUA" in text:
            # Khi THUA: KH√îNG +1 ngay. Chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªù th·∫Øng.
            log_msg("‚ùå THUA - chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªù TH·∫ÆNG k·∫ø ti·∫øp (ch∆∞a tƒÉng h·ªá s·ªë)")
            waiting_for_win = True
            last_prediction = None
            time.sleep(55)
            continue

        # === ƒêANG CH·ªú TH·∫ÆNG ‚Üí kh√¥ng ƒë·∫∑t m·ªõi ===
        if waiting_for_win:
            status_label.config(text="‚è≥ ƒêang ch·ªù t√≠n hi·ªáu TH·∫ÆNG ƒë·ªÉ tƒÉng h·ªá s·ªë...")
            time.sleep(0.3)
            continue

        # === D·ª∞ ƒêO√ÅN L·ªöN / NH·ªé (Giai ƒëo·∫°n 1) ===
        if "L·ªöN" in text or "LON" in text:
            if last_prediction != "LON":
                status_label.config(text=f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})")
                log_msg(f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})")
                perform_click("LON", BET_LEVELS[bet_index])
                status_label.config(text=f"üéØ ƒê√£ c∆∞·ª£c L·ªöN ‚Äì ƒë·ª£i {DELAY_AFTER_BET}s ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£...")
                for i in range(DELAY_AFTER_BET, 0, -1):
                    root = status_label.winfo_toplevel()
                    status_label.config(text=f"üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£... {i}s")
                    root.update()
                    time.sleep(1)
                last_prediction = "LON"

        elif "NH·ªé" in text or "NHO" in text:
            if last_prediction != "NHO":
                status_label.config(text=f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})")
                log_msg(f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})")
                perform_click("NHO", BET_LEVELS[bet_index])
                status_label.config(text=f"üéØ ƒê√£ c∆∞·ª£c NH·ªé ‚Äì ƒë·ª£i {DELAY_AFTER_BET}s ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£...")
                for i in range(DELAY_AFTER_BET, 0, -1):
                    root = status_label.winfo_toplevel()
                    status_label.config(text=f"üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£... {i}s")
                    root.update()
                    time.sleep(1)
                last_prediction = "NHO"

        bet_label.config(text=f"H·ªá s·ªë hi·ªán t·∫°i: {BET_LEVELS[bet_index]}")
        time.sleep(0.8)

    status_label.config(text="‚èπ Bot ƒë√£ d·ª´ng")

# === GUI ===
def start_bot(status_label, bet_label, log_box):
    global bot_running
    if not bot_running:
        bot_running = True
        threading.Thread(target=bot_loop, args=(status_label, bet_label, log_box), daemon=True).start()

def stop_bot(status_label):
    global bot_running
    bot_running = False
    status_label.config(text="‚è∏ ƒêang d·ª´ng...")

def open_logs_folder(status_label):
    try:
        if os.name == "nt":
            os.startfile(os.path.abspath("logs"))
        else:
            subprocess.Popen(["xdg-open", os.path.abspath("logs")])
        status_label.config(text="üìÇ ƒê√£ m·ªü th∆∞ m·ª•c logs")
    except Exception as e:
        status_label.config(text=f"‚ö†Ô∏è Kh√¥ng m·ªü ƒë∆∞·ª£c th∆∞ m·ª•c logs: {e}")

def main_gui():
    global BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS, TELE_CLOSE_POS
    global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT

    CONFIG_FILE = "config.json"

    # --- H√†m load/save config ---
    def load_config():
        if os.path.exists(CONFIG_FILE):
            try:
                with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                    data = json.load(f)
                    return {
                        "BTN_LON_POS": tuple(data.get("BTN_LON_POS", BTN_LON_POS)),
                        "BTN_NHO_POS": tuple(data.get("BTN_NHO_POS", BTN_NHO_POS)),
                        "BET_BOX_POS": tuple(data.get("BET_BOX_POS", BET_BOX_POS)),
                        "BTN_GUI_POS": tuple(data.get("BTN_GUI_POS", BTN_GUI_POS)),
                        "TELE_CLICK_POS": tuple(data.get("TELE_CLICK_POS", TELE_CLICK_POS)),
                        "TELE_CLOSE_POS": tuple(data.get("TELE_CLOSE_POS", TELE_CLOSE_POS)),
                        "DELAY_AFTER_BET": int(data.get("DELAY_AFTER_BET", DELAY_AFTER_BET)),
                        "DELAY_AFTER_WIN_WAIT": int(data.get("DELAY_AFTER_WIN_WAIT", DELAY_AFTER_WIN_WAIT))
                    }
            except Exception as e:
                logging.warning("‚ö†Ô∏è L·ªói load config: %s", e)
        return {}

    def save_config():
        data = {
            "BTN_LON_POS": BTN_LON_POS,
            "BTN_NHO_POS": BTN_NHO_POS,
            "BET_BOX_POS": BET_BOX_POS,
            "BTN_GUI_POS": BTN_GUI_POS,
            "TELE_CLICK_POS": TELE_CLICK_POS,
            "TELE_CLOSE_POS": TELE_CLOSE_POS,
            "DELAY_AFTER_BET": DELAY_AFTER_BET,
            "DELAY_AFTER_WIN_WAIT": DELAY_AFTER_WIN_WAIT
        }
        try:
            with open(CONFIG_FILE, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)
            status_label.config(text="üíæ ƒê√£ l∆∞u v√†o config.json")
        except Exception as e:
            status_label.config(text=f"‚ö†Ô∏è L·ªói l∆∞u file: {e}")

    # === T·∫°o giao di·ªán ===
    root = tk.Tk()
    root.title("Auto Bot Winluck v3")
    root.geometry("500x1020")
    root.resizable(False, False)
    root.attributes('-topmost', True)

    frame = ttk.Frame(root, padding=10)
    frame.pack(fill='both', expand=True)

    ttk.Label(frame, text="ü§ñ Tr·∫°ng th√°i bot:", font=('Arial', 10, 'bold')).pack(pady=5)
    status_label = ttk.Label(frame, text="‚è∏ Ch∆∞a ch·∫°y", font=('Arial', 10))
    status_label.pack()

    bet_label = ttk.Label(frame, text="H·ªá s·ªë hi·ªán t·∫°i: 1000", font=('Arial', 10))
    bet_label.pack(pady=5)

    # === Log box ===
    log_box = scrolledtext.ScrolledText(frame, width=60, height=12, font=('Consolas', 9))
    log_box.pack(pady=5)

    # === √î ch·ªânh t·ªça ƒë·ªô ===
    ttk.Label(frame, text="‚öôÔ∏è C·∫≠p nh·∫≠t t·ªça ƒë·ªô:", font=('Arial', 10, 'bold')).pack(pady=5)
    coord_frame = ttk.Frame(frame)
    coord_frame.pack(pady=3)

    entries = {}
    focused_entry = tk.StringVar(value="")  # l∆∞u t√™n √¥ ƒëang focus

    def make_entry(label_text, var_name, pos):
        ttk.Label(coord_frame, text=label_text).pack()
        entry = ttk.Entry(coord_frame, width=30)
        entry.insert(0, f"{pos[0]}, {pos[1]}")
        entry.pack(pady=2)
        entries[var_name] = entry
        entry.bind("<FocusIn>", lambda e, name=var_name: focused_entry.set(name))

    make_entry("N√∫t L·ªöN:", "BTN_LON_POS", BTN_LON_POS)
    make_entry("N√∫t NH·ªé:", "BTN_NHO_POS", BTN_NHO_POS)
    make_entry("√î BET:", "BET_BOX_POS", BET_BOX_POS)
    make_entry("N√∫t G·ª¨I:", "BTN_GUI_POS", BTN_GUI_POS)
    make_entry("Telegram:", "TELE_CLICK_POS", TELE_CLICK_POS)
    make_entry("ƒê√≥ng c∆∞·ª£c:", "TELE_CLOSE_POS", TELE_CLOSE_POS)

    # === Delay Settings ===
    ttk.Label(frame, text="üïí C·∫•u h√¨nh th·ªùi gian ch·ªù:", font=('Arial', 10, 'bold')).pack(pady=5)
    delay_frame = ttk.Frame(frame)
    delay_frame.pack(pady=3)

    delay_bet_var = tk.StringVar(value=str(DELAY_AFTER_BET))
    delay_winwait_var = tk.StringVar(value=str(DELAY_AFTER_WIN_WAIT))

    ttk.Label(delay_frame, text="‚è± Sau khi c∆∞·ª£c (gi√¢y):").pack()
    delay_bet_entry = ttk.Entry(delay_frame, textvariable=delay_bet_var, width=12)
    delay_bet_entry.pack(pady=2)

    ttk.Label(delay_frame, text="üì© Sau khi th·∫Øng ch·ªù (gi√¢y):").pack()
    delay_winwait_entry = ttk.Entry(delay_frame, textvariable=delay_winwait_var, width=12)
    delay_winwait_entry.pack(pady=2)

    # === N·∫°p config sau khi ƒë√£ t·∫°o c√°c bi·∫øn GUI ===
    conf = load_config()
    if conf:
        BTN_LON_POS = conf["BTN_LON_POS"]
        BTN_NHO_POS = conf["BTN_NHO_POS"]
        BET_BOX_POS = conf["BET_BOX_POS"]
        BTN_GUI_POS = conf["BTN_GUI_POS"]
        TELE_CLICK_POS = conf["TELE_CLICK_POS"]
        TELE_CLOSE_POS = conf["TELE_CLOSE_POS"]
        DELAY_AFTER_BET = conf["DELAY_AFTER_BET"]
        DELAY_AFTER_WIN_WAIT = conf["DELAY_AFTER_WIN_WAIT"]
        # √°p l·∫°i v√†o √¥ nh·∫≠p
        entries["BTN_LON_POS"].delete(0, tk.END); entries["BTN_LON_POS"].insert(0, f"{BTN_LON_POS[0]}, {BTN_LON_POS[1]}")
        entries["BTN_NHO_POS"].delete(0, tk.END); entries["BTN_NHO_POS"].insert(0, f"{BTN_NHO_POS[0]}, {BTN_NHO_POS[1]}")
        entries["BET_BOX_POS"].delete(0, tk.END); entries["BET_BOX_POS"].insert(0, f"{BET_BOX_POS[0]}, {BET_BOX_POS[1]}")
        entries["BTN_GUI_POS"].delete(0, tk.END); entries["BTN_GUI_POS"].insert(0, f"{BTN_GUI_POS[0]}, {BTN_GUI_POS[1]}")
        entries["TELE_CLICK_POS"].delete(0, tk.END); entries["TELE_CLICK_POS"].insert(0, f"{TELE_CLICK_POS[0]}, {TELE_CLICK_POS[1]}")
        entries["TELE_CLOSE_POS"].delete(0, tk.END); entries["TELE_CLOSE_POS"].insert(0, f"{TELE_CLOSE_POS[0]}, {TELE_CLOSE_POS[1]}")
        delay_bet_var.set(str(DELAY_AFTER_BET))
        delay_winwait_var.set(str(DELAY_AFTER_WIN_WAIT))

    # === N√∫t X√°c ƒë·ªãnh & G√°n t·ªça ƒë·ªô (ƒë·∫øm ng∆∞·ª£c 2s theo y√™u c·∫ßu) ===
    def get_current_mouse_position():
        import tkinter.messagebox as mbox
        active = focused_entry.get()
        if not active:
            mbox.showwarning("Ch∆∞a ch·ªçn √¥", "H√£y click v√†o √¥ b·∫°n mu·ªën g√°n t·ªça ƒë·ªô tr∆∞·ªõc!")
            return
        for i in range(2, 0, -1):
            status_label.config(text=f"üïê Di chu·ªôt ƒë·∫øn v·ªã tr√≠ cho '{active}' ... ({i})")
            root.update()
            time.sleep(1)
        pos = pyautogui.position()
        entries[active].delete(0, tk.END)
        entries[active].insert(0, f"{pos.x}, {pos.y}")
        root.clipboard_clear()
        root.clipboard_append(f"{pos.x}, {pos.y}")
        root.update()
        mbox.showinfo("T·ªça ƒë·ªô m·ªõi", f"{active} = ({pos.x}, {pos.y})")
        status_label.config(text=f"üìç G√°n th√†nh c√¥ng {active} = ({pos.x}, {pos.y})")

    ttk.Button(coord_frame, text="üìç X√°c ƒë·ªãnh & G√°n t·ªça ƒë·ªô (2s)", command=get_current_mouse_position).pack(pady=6)

    # === N√∫t C·∫≠p nh·∫≠t (v√† l∆∞u n·∫øu ch·ªçn) ===
    def update_coords(save=False):
        global BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS, TELE_CLOSE_POS
        global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT
        try:
            BTN_LON_POS = tuple(map(int, entries["BTN_LON_POS"].get().split(',')))
            BTN_NHO_POS = tuple(map(int, entries["BTN_NHO_POS"].get().split(',')))
            BET_BOX_POS = tuple(map(int, entries["BET_BOX_POS"].get().split(',')))
            BTN_GUI_POS = tuple(map(int, entries["BTN_GUI_POS"].get().split(',')))
            TELE_CLICK_POS = tuple(map(int, entries["TELE_CLICK_POS"].get().split(',')))
            TELE_CLOSE_POS = tuple(map(int, entries["TELE_CLOSE_POS"].get().split(',')))

            # c·∫≠p nh·∫≠t delay
            DELAY_AFTER_BET = int(delay_bet_var.get())
            DELAY_AFTER_WIN_WAIT = int(delay_winwait_var.get())

            if save:
                save_config()
            else:
                status_label.config(text="‚úÖ C·∫≠p nh·∫≠t t·∫°m th·ªùi th√†nh c√¥ng!")
        except ValueError:
            status_label.config(text="‚ö†Ô∏è L·ªói: Delay v√† t·ªça ƒë·ªô ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            status_label.config(text=f"‚ö†Ô∏è L·ªói: {e}")

    ttk.Button(coord_frame, text="üíæ C·∫≠p nh·∫≠t & L∆∞u", command=lambda: update_coords(save=True)).pack(pady=5)
    ttk.Button(coord_frame, text="üîÑ Ch·ªâ c·∫≠p nh·∫≠t t·∫°m", command=lambda: update_coords(save=False)).pack(pady=3)

    # === N√∫t ƒëi·ªÅu khi·ªÉn bot ===
    btn_frame = ttk.Frame(frame)
    btn_frame.pack(pady=8)

    btn_start = ttk.Button(btn_frame, text="‚ñ∂ Start", command=lambda: start_bot(status_label, bet_label, log_box))
    btn_start.pack(side='left', expand=True, padx=10)

    btn_stop = ttk.Button(btn_frame, text="‚èπ Stop", command=lambda: stop_bot(status_label))
    btn_stop.pack(side='left', expand=True, padx=10)

    btn_logs = ttk.Button(btn_frame, text="üìÇ M·ªü th∆∞ m·ª•c logs", command=lambda: open_logs_folder(status_label))
    btn_logs.pack(side='left', expand=True, padx=10)

    root.mainloop()

if __name__ == "__main__":
    main_gui()
