import time
import threading
import logging
import pyautogui
import pytesseract
import cv2
import numpy as np
from PIL import Image
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, filedialog
import json
import os
import subprocess
from datetime import datetime
import sys
import argparse

# ============================
#  Auto Bot Winluck v4_pro
#  Nh√°nh: (2) C·∫£i ti·∫øn GUI + (4) T·ªëi ∆∞u k·ªπ thu·∫≠t
#  - Pause / Resume
#  - Dashboard mini (sparkline th·∫Øng/thua) -> V·∫º B·∫∞NG TKINTER CANVAS (KH√îNG D√ôNG matplotlib)
#  - Menu (File/View/Help), profile c·∫•u h√¨nh
#  - DRY_RUN toggle, √¢m thanh t√πy ch·ªçn
#  - Lock thao t√°c click, log ·ªïn ƒë·ªãnh, b·∫Øt l·ªói ch·∫Øc tay
#  - --selftest: ch·∫°y b√†i ki·ªÉm tra nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ph·ª• thu·ªôc matplotlib
# ============================

# ---------- Chu·∫©n b·ªã th∆∞ m·ª•c ----------
if not os.path.exists("logs"):
    os.makedirs("logs")
if not os.path.exists("profiles"):
    os.makedirs("profiles")

# ---------- Logging ra file + console ----------
log_filename = f"logs/bot_log_{datetime.now().strftime('%Y-%m-%d')}.txt"
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# ---------- C·∫•u h√¨nh OCR ----------
# N·∫øu tesseract kh√¥ng ·ªü ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh, cho ph√©p ng∆∞·ªùi d√πng ƒë·ªïi trong GUI -> Menu File
DEFAULT_TESS = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
try:
    pytesseract.pytesseract.tesseract_cmd = DEFAULT_TESS
except Exception:
    pass
TESSERACT_LANG = 'vie'

# ---------- Tham s·ªë th·ªùi gian ----------
DELAY_AFTER_BET = 10          # sau khi c∆∞·ª£c xong, ch·ªù k·∫øt qu·∫£
DELAY_AFTER_WIN_WAIT = 24     # sau khi TH·∫ÆNG trong ch·∫ø ƒë·ªô ch·ªù, ƒë·ª£i Telegram c·∫≠p nh·∫≠t

# ---------- V√πng OCR & t·ªça ƒë·ªô (m·∫∑c ƒë·ªãnh) ----------
TELE_REGION = (28, 989, 197, 82)  # (x, y, w, h)
BTN_LON_POS = (623, 837)
BTN_NHO_POS = (804, 837)
BET_BOX_POS = (757, 958)
BTN_GUI_POS = (731, 1089)
TELE_CLICK_POS = (428, 1032)
TELE_CLOSE_POS = (1135, 592)

# ---------- H·ªá s·ªë ----------
BET_LEVELS = [1000, 2000, 4000, 8000, 17000, 34000, 68000]

# ---------- Tr·∫°ng th√°i to√†n c·ª•c ----------
bet_index = 0
bot_running = False
bot_paused = False
DRY_RUN = False
ENABLE_SOUND = False

# ---------- Lock ƒë·ªÉ tr√°nh ch·ªìng click ----------
click_lock = threading.Lock()

# ---------- L·ªãch s·ª≠ k·∫øt qu·∫£ cho dashboard ----------
# L∆∞u t·ªëi ƒëa 60 s·ª± ki·ªán g·∫ßn nh·∫•t: 1 = th·∫Øng, 0 = thua, -1 = ƒë·∫∑t c∆∞·ª£c
history = []
HISTORY_MAX = 60

# ============================
#        TI·ªÜN √çCH √ÇM THANH
# ============================

def play_sound(win=True):
    if not ENABLE_SOUND:
        return
    try:
        if os.name == 'nt':
            import winsound
            freq = 1200 if win else 500
            dur = 120 if win else 200
            winsound.Beep(freq, dur)
        else:
            pass
    except Exception as e:
        logging.warning(f"√Çm thanh l·ªói: {e}")

# ============================
#               OCR
# ============================

def get_text_from_region(region):
    try:
        im = pyautogui.screenshot(region=region)
        im = im.convert('RGB')
        arr = np.array(im)
        gray = cv2.cvtColor(arr, cv2.COLOR_BGR2GRAY)
        _, th = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        pil = Image.fromarray(th)
        config = '--psm 6'
        text = pytesseract.image_to_string(pil, lang=TESSERACT_LANG, config=config)
        return text.strip().upper()
    except Exception as e:
        logging.error(f"OCR error: {e}")
        return ""

# ============================
#      CLICK & G·ª¨I C∆Ø·ª¢C
# ============================

def click_at(pos, desc="v·ªã tr√≠"):
    if DRY_RUN:
        logging.info(f"[DRY_RUN] Click gi·∫£ l·∫≠p {desc} t·∫°i {pos}")
        return
    try:
        with click_lock:
            pyautogui.moveTo(pos[0], pos[1], duration=0.15)
            pyautogui.click()
            time.sleep(0.3)
    except Exception as e:
        logging.error(f"L·ªói click {desc}: {e}")


def input_bet_and_send(amount):
    if DRY_RUN:
        logging.info(f"[DRY_RUN] Nh·∫≠p h·ªá s·ªë {amount} v√† g·ª≠i")
        return
    try:
        click_at(BET_BOX_POS, "√¥ BET")
        pyautogui.hotkey('ctrl', 'a')
        pyautogui.press('backspace')
        pyautogui.typewrite(str(amount))
        time.sleep(0.25)
        click_at(BTN_GUI_POS, "n√∫t G·ª¨I")
        time.sleep(0.4)
        click_at(TELE_CLOSE_POS, "n√∫t ƒê√ìNG C∆Ø·ª¢C")
        time.sleep(0.25)
        click_telegram()  # focus Telegram ƒë·ªÉ OCR
    except Exception as e:
        logging.error(f"L·ªói nh·∫≠p & g·ª≠i h·ªá s·ªë: {e}")


def perform_click(prediction, amount):
    try:
        if prediction == "LON":
            click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 1)")
            if not DRY_RUN:
                pyautogui.hotkey('ctrl', 'r')
            time.sleep(2.5)
            click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 2)")
        elif prediction == "NHO":
            click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 1)")
            if not DRY_RUN:
                pyautogui.hotkey('ctrl', 'r')
            time.sleep(2.5)
            click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 2)")
        input_bet_and_send(amount)
    except Exception as e:
        logging.error(f"L·ªói perform_click: {e}")


def click_telegram():
    click_at(TELE_CLICK_POS, "Telegram b√™n tr√°i")

# ============================
#            DASHBOARD
# ============================

def push_history(val, canvas):
    """
    val: 1=TH·∫ÆNG, 0=THUA, -1=ƒê·∫∂T
    V·∫Ω sparkline nh·ªè tr√™n TK Canvas (KH√îNG d√πng matplotlib).
    """
    history.append(val)
    if len(history) > HISTORY_MAX:
        history.pop(0)
    draw_sparkline(canvas)


def draw_sparkline(canvas):
    """V·∫Ω sparkline tr√™n tk.Canvas, kh√¥ng c√≥ b·∫•t k·ª≥ import matplotlib n√†o."""
    canvas.delete("all")
    w = int(canvas["width"])
    h = int(canvas["height"])
    n = len(history)
    if n <= 1:
        return
    # map: -1 -> h*0.5, 0 -> h*0.8, 1 -> h*0.2 (cao = t·ªët)
    def y_map(v):
        return int(h*0.5) if v == -1 else (int(h*0.8) if v == 0 else int(h*0.2))
    step = max(1, w // (HISTORY_MAX-1))
    points = []
    x = w - step*(n-1)
    for i, v in enumerate(history):
        points.append((x + i*step, y_map(v)))
    # v·∫Ω l∆∞·ªõi nh·∫π
    canvas.create_line(0, h*0.5, w, h*0.5, fill="#777", dash=(2,2))
    # v·∫Ω polyline
    for i in range(len(points)-1):
        x1, y1 = points[i]
        x2, y2 = points[i+1]
        color = "#4CAF50" if history[i+1] == 1 else ("#F44336" if history[i+1] == 0 else "#2196F3")
        canvas.create_line(x1, y1, x2, y2, fill=color, width=2)

# ============================
#            BOT LOOP
# ============================

def bot_loop(status_var, bet_var, log_box, spark_canvas):
    global bet_index, bot_running, bot_paused
    last_prediction = None
    waiting_for_win = False

    def log_msg(msg):
        # C·∫©n tr·ªçng: Tk kh√¥ng thread-safe, nh∆∞ng th·ª±c t·∫ø nhi·ªÅu m√°y v·∫´n ·ªïn.
        # N·∫øu g·∫∑p l·ªói, c√≥ th·ªÉ chuy·ªÉn sang queue + root.after.
        log_box.insert(tk.END, msg + "\n")
        log_box.see(tk.END)
        logging.info(msg)

    set_status(status_var, "üîÑ ƒêang ch·∫°y...", style="green")

    while bot_running:
        try:
            # T·∫°m d·ª´ng
            while bot_paused and bot_running:
                set_status(status_var, "‚è∏ Paused ‚Äî bot ƒëang t·∫°m d·ª´ng", style="yellow")
                time.sleep(0.3)
            if not bot_running:
                break

            click_telegram()  # ƒë·∫£m b·∫£o OCR telegram
            text = get_text_from_region(TELE_REGION).replace('\n', ' ')

            # K·∫æT QU·∫¢
            if "TH·∫ÆNG" in text:
                play_sound(win=True)
                if waiting_for_win:
                    if bet_index < len(BET_LEVELS) - 1:
                        bet_index += 1
                    log_msg(f"‚úÖ TH·∫ÆNG (trong ch·∫ø ƒë·ªô ch·ªù) ‚Üí tƒÉng h·ªá s·ªë l√™n {BET_LEVELS[bet_index]}")
                    push_history(1, spark_canvas)
                    waiting_for_win = False
                    last_prediction = None
                    countdown(status_var, f"‚è≥ Ch·ªù Telegram c·∫≠p nh·∫≠t...", DELAY_AFTER_WIN_WAIT)
                    continue
                else:
                    log_msg("‚úÖ TH·∫ÆNG - reset h·ªá s·ªë v·ªÅ 1000")
                    push_history(1, spark_canvas)
                    bet_index = 0
                    last_prediction = None
                    countdown(status_var, "üïí Ngh·ªâ ng·∫Øn...", 22)
                    continue

            if "THUA" in text:
                play_sound(win=False)
                log_msg("‚ùå THUA - chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªù TH·∫ÆNG k·∫ø ti·∫øp")
                push_history(0, spark_canvas)
                waiting_for_win = True
                last_prediction = None
                countdown(status_var, "üïí Ch·ªù ·ªïn ƒë·ªãnh...", 55)
                continue

            if waiting_for_win:
                set_status(status_var, "‚è≥ ƒêang ch·ªù t√≠n hi·ªáu TH·∫ÆNG ƒë·ªÉ tƒÉng h·ªá s·ªë...", style="yellow")
                time.sleep(0.25)
                continue

            # D·ª∞ ƒêO√ÅN
            if "L·ªöN" in text or "LON" in text:
                if last_prediction != "LON":
                    set_status(status_var, f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})", style="blue")
                    log_msg(f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})")
                    push_history(-1, spark_canvas)
                    perform_click("LON", BET_LEVELS[bet_index])
                    countdown(status_var, "üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£...", DELAY_AFTER_BET)
                    last_prediction = "LON"

            elif "NH·ªé" in text or "NHO" in text:
                if last_prediction != "NHO":
                    set_status(status_var, f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})", style="blue")
                    log_msg(f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})")
                    push_history(-1, spark_canvas)
                    perform_click("NHO", BET_LEVELS[bet_index])
                    countdown(status_var, "üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£...", DELAY_AFTER_BET)
                    last_prediction = "NHO"

            bet_var.set(f"H·ªá s·ªë hi·ªán t·∫°i: {BET_LEVELS[bet_index]}")
            time.sleep(0.6)
        except Exception as e:
            logging.exception(f"L·ªói v√≤ng l·∫∑p: {e}")
            set_status(status_var, f"‚ö†Ô∏è L·ªói: {e}", style="red")
            time.sleep(1.0)

    set_status(status_var, "‚èπ Bot ƒë√£ d·ª´ng", style="red")


def countdown(status_var, label, secs):
    for i in range(secs, 0, -1):
        set_status(status_var, f"{label} {i}s", style="yellow")
        time.sleep(1)


def set_status(status_var, text, style="normal"):
    status_var.set(text)

# ============================
#              GUI
# ============================

thread_ref = None

def start_bot(status_var, bet_var, log_box, spark_canvas):
    global bot_running, bot_paused, thread_ref
    if bot_running:
        return
    bot_running = True
    bot_paused = False
    thread_ref = threading.Thread(target=bot_loop, args=(status_var, bet_var, log_box, spark_canvas), daemon=True)
    thread_ref.start()


def stop_bot(status_var):
    global bot_running, bot_paused
    bot_running = False
    bot_paused = False
    status_var.set("‚è∏ ƒêang d·ª´ng...")


def pause_bot():
    global bot_paused
    bot_paused = True


def resume_bot():
    global bot_paused
    bot_paused = False


# ---------- L∆∞u / N·∫°p c·∫•u h√¨nh ----------
DEFAULT_CONFIG = "config.json"

def save_config_to(path, status_var):
    data = {
        "TELE_REGION": TELE_REGION,
        "BTN_LON_POS": BTN_LON_POS,
        "BTN_NHO_POS": BTN_NHO_POS,
        "BET_BOX_POS": BET_BOX_POS,
        "BTN_GUI_POS": BTN_GUI_POS,
        "TELE_CLICK_POS": TELE_CLICK_POS,
        "TELE_CLOSE_POS": TELE_CLOSE_POS,
        "DELAY_AFTER_BET": DELAY_AFTER_BET,
        "DELAY_AFTER_WIN_WAIT": DELAY_AFTER_WIN_WAIT,
        "DRY_RUN": DRY_RUN,
        "ENABLE_SOUND": ENABLE_SOUND,
        "TESS_CMD": pytesseract.pytesseract.tesseract_cmd,
        "BET_LEVELS": BET_LEVELS,
    }
    try:
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        status_var.set(f"üíæ ƒê√£ l∆∞u c·∫•u h√¨nh ‚Üí {os.path.basename(path)}")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói l∆∞u file: {e}")


def load_config_from(path, widgets, status_var):
    global TELE_REGION, BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS, TELE_CLOSE_POS
    global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT, DRY_RUN, ENABLE_SOUND, BET_LEVELS
    try:
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        TELE_REGION = tuple(data.get("TELE_REGION", TELE_REGION))
        BTN_LON_POS = tuple(data.get("BTN_LON_POS", BTN_LON_POS))
        BTN_NHO_POS = tuple(data.get("BTN_NHO_POS", BTN_NHO_POS))
        BET_BOX_POS = tuple(data.get("BET_BOX_POS", BET_BOX_POS))
        BTN_GUI_POS = tuple(data.get("BTN_GUI_POS", BTN_GUI_POS))
        TELE_CLICK_POS = tuple(data.get("TELE_CLICK_POS", TELE_CLICK_POS))
        TELE_CLOSE_POS = tuple(data.get("TELE_CLOSE_POS", TELE_CLOSE_POS))
        DELAY_AFTER_BET = int(data.get("DELAY_AFTER_BET", DELAY_AFTER_BET))
        DELAY_AFTER_WIN_WAIT = int(data.get("DELAY_AFTER_WIN_WAIT", DELAY_AFTER_WIN_WAIT))
        DRY_RUN = bool(data.get("DRY_RUN", DRY_RUN))
        ENABLE_SOUND = bool(data.get("ENABLE_SOUND", ENABLE_SOUND))
        pytesseract.pytesseract.tesseract_cmd = data.get("TESS_CMD", pytesseract.pytesseract.tesseract_cmd)
        BET_LEVELS = list(data.get("BET_LEVELS", BET_LEVELS))
        # √°p v√†o widgets
        widgets["entry_lon"].delete(0, tk.END); widgets["entry_lon"].insert(0, f"{BTN_LON_POS[0]}, {BTN_LON_POS[1]}")
        widgets["entry_nho"].delete(0, tk.END); widgets["entry_nho"].insert(0, f"{BTN_NHO_POS[0]}, {BTN_NHO_POS[1]}")
        widgets["entry_bet"].delete(0, tk.END); widgets["entry_bet"].insert(0, f"{BET_BOX_POS[0]}, {BET_BOX_POS[1]}")
        widgets["entry_gui"].delete(0, tk.END); widgets["entry_gui"].insert(0, f"{BTN_GUI_POS[0]}, {BTN_GUI_POS[1]}")
        widgets["entry_tele"].delete(0, tk.END); widgets["entry_tele"].insert(0, f"{TELE_CLICK_POS[0]}, {TELE_CLICK_POS[1]}")
        widgets["entry_close"].delete(0, tk.END); widgets["entry_close"].insert(0, f"{TELE_CLOSE_POS[0]}, {TELE_CLOSE_POS[1]}")
        widgets["var_delay_bet"].set(str(DELAY_AFTER_BET))
        widgets["var_delay_win"].set(str(DELAY_AFTER_WIN_WAIT))
        widgets["var_dry"].set(1 if DRY_RUN else 0)
        widgets["var_sound"].set(1 if ENABLE_SOUND else 0)
        widgets["entry_tess"].delete(0, tk.END); widgets["entry_tess"].insert(0, pytesseract.pytesseract.tesseract_cmd)
        widgets["entry_levels"].delete(0, tk.END); widgets["entry_levels"].insert(0, ",".join(map(str, BET_LEVELS)))
        status_var.set(f"üì• ƒê√£ n·∫°p c·∫•u h√¨nh t·ª´ {os.path.basename(path)}")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói n·∫°p file: {e}")


# ---------- H√†m ch·ªçn t·ªça ƒë·ªô (ƒë·∫øm ng∆∞·ª£c 2s) ----------

def pick_position(focused_key, entries_map, status_var, root):
    active = focused_key.get()
    if not active:
        messagebox.showwarning("Ch∆∞a ch·ªçn √¥", "H√£y click v√†o √¥ b·∫°n mu·ªën g√°n t·ªça ƒë·ªô tr∆∞·ªõc!")
        return
    for i in range(2, 0, -1):
        status_var.set(f"üïê Di chu·ªôt ƒë·∫øn v·ªã tr√≠ cho '{active}' ... ({i})")
        root.update()
        time.sleep(1)
    pos = pyautogui.position()
    entries_map[active].delete(0, tk.END)
    entries_map[active].insert(0, f"{pos.x}, {pos.y}")
    root.clipboard_clear(); root.clipboard_append(f"{pos.x}, {pos.y}")
    messagebox.showinfo("T·ªça ƒë·ªô m·ªõi", f"{active} = ({pos.x}, {pos.y})")
    status_var.set(f"üìç G√°n th√†nh c√¥ng {active} = ({pos.x}, {pos.y})")


# ---------- C·∫≠p nh·∫≠t bi·∫øn c·∫•u h√¨nh t·ª´ GUI ----------

def apply_updates(widgets, status_var, save=False, path=DEFAULT_CONFIG):
    global BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS, TELE_CLOSE_POS
    global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT, DRY_RUN, ENABLE_SOUND, BET_LEVELS
    try:
        BTN_LON_POS = tuple(map(int, widgets["entry_lon"].get().split(',')))
        BTN_NHO_POS = tuple(map(int, widgets["entry_nho"].get().split(',')))
        BET_BOX_POS = tuple(map(int, widgets["entry_bet"].get().split(',')))
        BTN_GUI_POS = tuple(map(int, widgets["entry_gui"].get().split(',')))
        TELE_CLICK_POS = tuple(map(int, widgets["entry_tele"].get().split(',')))
        TELE_CLOSE_POS = tuple(map(int, widgets["entry_close"].get().split(',')))
        DELAY_AFTER_BET = int(widgets["var_delay_bet"].get())
        DELAY_AFTER_WIN_WAIT = int(widgets["var_delay_win"].get())
        DRY_RUN = bool(widgets["var_dry"].get())
        ENABLE_SOUND = bool(widgets["var_sound"].get())
        pytesseract.pytesseract.tesseract_cmd = widgets["entry_tess"].get().strip()
        # levels
        levels = [int(x.strip()) for x in widgets["entry_levels"].get().split(',') if x.strip()]
        if levels:
            BET_LEVELS = levels
        if save:
            save_config_to(path, status_var)
        else:
            status_var.set("‚úÖ C·∫≠p nh·∫≠t t·∫°m th·ªùi th√†nh c√¥ng!")
    except ValueError:
        status_var.set("‚ö†Ô∏è L·ªói: Delay / t·ªça ƒë·ªô / levels ph·∫£i l√† s·ªë nguy√™n!")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói: {e}")


# ============================
#          SELF TESTS
# ============================

class _FakeCanvas:
    """Canvas gi·∫£ ƒë·ªÉ test draw_sparkline kh√¥ng c·∫ßn tkinter th·ª±c."""
    def __init__(self, w=200, h=80):
        self.cfg = {"width": str(w), "height": str(h)}
        self.lines = []
        self.cleared = False
    def __getitem__(self, k):
        return self.cfg[k]
    def delete(self, *_):
        self.cleared = True
    def create_line(self, *args, **kwargs):
        self.lines.append((args, kwargs))


def run_self_tests():
    """Ch·∫°y c√°c test c∆° b·∫£n ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng ph·ª• thu·ªôc matplotlib v√† dashboard ho·∫°t ƒë·ªông."""
    # Test 1: Kh√¥ng th·ªÉ import matplotlib (n·∫øu m√¥i tr∆∞·ªùng thi·∫øu), code v·∫´n ch·∫°y
    try:
        import importlib
        spec = importlib.util.find_spec('matplotlib')
        if spec is not None:
            logging.info("matplotlib c√≥ s·∫µn trong m√¥i tr∆∞·ªùng (kh√¥ng b·∫Øt bu·ªôc).")
        else:
            logging.info("matplotlib kh√¥ng c√≥ ‚Äî ki·ªÉm tra r·∫±ng ch∆∞∆°ng tr√¨nh v·∫´n ch·∫°y OK.")
    except Exception as e:
        logging.info(f"Ki·ªÉm tra matplotlib: {e}")

    # Test 2: V·∫Ω sparkline b·∫±ng canvas gi·∫£
    fake = _FakeCanvas(240, 80)
    # m√¥ ph·ªèng l·ªãch s·ª≠: ƒë·∫∑t, th·∫Øng, thua, ƒë·∫∑t, th·∫Øng
    history.clear()
    for v in (-1, 1, 0, -1, 1):
        history.append(v)
    draw_sparkline(fake)
    assert fake.cleared is True, "Canvas ch∆∞a ƒë∆∞·ª£c x√≥a tr∆∞·ªõc khi v·∫Ω"
    assert len(fake.lines) > 0, "Kh√¥ng v·∫Ω ƒë∆∞·ª£c line n√†o"

    # Test 3: push_history kh√¥ng tr√†n b·ªô nh·ªõ v√† gi·ªØ k√≠ch th∆∞·ªõc t·ªëi ƒëa
    fake = _FakeCanvas(240, 80)
    history.clear()
    for _ in range(HISTORY_MAX + 10):
        push_history(1, fake)
    assert len(history) <= HISTORY_MAX, "L·ªãch s·ª≠ v∆∞·ª£t qu√° gi·ªõi h·∫°n"

    print("SELFTEST_OK")


# ---------- MAIN GUI ----------

def main_gui():
    global DRY_RUN
    root = tk.Tk()
    root.title("Auto Bot Winluck v4_pro (Compact UI)")
    root.geometry("870x750")   # Giao di·ªán r·ªông h∆°n, th·∫•p h∆°n
    root.resizable(False, False)
    root.configure(bg="#53a4d6")

    # ----- Bi·∫øn & Style -----
    style = ttk.Style(root)
    style.configure("Status.TLabel", font=("Arial", 10))

    status_var = tk.StringVar(value="‚è∏ Ch∆∞a ch·∫°y")
    bet_var = tk.StringVar(value=f"H·ªá s·ªë hi·ªán t·∫°i: {BET_LEVELS[0]}")

    # ----- Khung ch√≠nh chia 2 c·ªôt -----
    main_frame = ttk.Frame(root, padding=10)
    main_frame.pack(fill="both", expand=True)

    left_frame = ttk.Frame(main_frame)
    left_frame.grid(row=0, column=0, sticky="n")
    right_frame = ttk.Frame(main_frame)
    right_frame.grid(row=0, column=1, padx=(15, 0), sticky="n")

    # ======== C·ªòT TR√ÅI ========
    ttk.Label(left_frame, text="ü§ñ Tr·∫°ng th√°i bot:", font=('Arial', 11, 'bold')).pack()
    ttk.Label(left_frame, textvariable=status_var, style="Status.TLabel").pack()
    ttk.Label(left_frame, textvariable=bet_var).pack(pady=4)

    ttk.Label(left_frame, text="üìä Dashboard (60 g·∫ßn nh·∫•t)", font=('Arial', 10, 'bold')).pack(pady=(8, 4))
    spark_canvas = tk.Canvas(left_frame, width=400, height=80, bg="#1e1e1e", highlightthickness=1, highlightbackground="#444")
    spark_canvas.pack(pady=(0, 10))

    ttk.Label(left_frame, text="üß≠ Nh·∫≠t k√Ω", font=('Arial', 10, 'bold')).pack(pady=(4, 4))
    log_box = scrolledtext.ScrolledText(left_frame, width=60, height=16, font=('Consolas', 9))
    log_box.pack(pady=(0, 6))

    # ======== C·ªòT PH·∫¢I ========
    ttk.Label(right_frame, text="‚öôÔ∏è T·ªça ƒë·ªô ƒëi·ªÅu khi·ªÉn", font=('Arial', 10, 'bold')).pack(pady=(0, 4))
    coord_frame = ttk.Frame(right_frame)
    coord_frame.pack()

    def make_entry(parent, label, value):
        f = ttk.Frame(parent)
        f.pack(pady=2, anchor='w')
        ttk.Label(f, text=label, width=12).pack(side='left')
        e = ttk.Entry(f, width=18)
        e.insert(0, f"{value[0]}, {value[1]}")
        e.pack(side='left')
        return e

    widgets = {}
    widgets["entry_lon"] = make_entry(coord_frame, "N√∫t L·ªöN:", BTN_LON_POS)
    widgets["entry_nho"] = make_entry(coord_frame, "N√∫t NH·ªé:", BTN_NHO_POS)
    widgets["entry_bet"] = make_entry(coord_frame, "√î BET:", BET_BOX_POS)
    widgets["entry_gui"] = make_entry(coord_frame, "N√∫t G·ª¨I:", BTN_GUI_POS)
    widgets["entry_tele"] = make_entry(coord_frame, "Telegram:", TELE_CLICK_POS)
    widgets["entry_close"] = make_entry(coord_frame, "ƒê√≥ng c∆∞·ª£c:", TELE_CLOSE_POS)

    ttk.Button(right_frame, text="üìç G√°n t·ªça ƒë·ªô (2s)", command=lambda: pick_position(tk.StringVar(value="entry_lon"), widgets, status_var, root)).pack(pady=6)

    ttk.Label(right_frame, text="üïí Th·ªùi gian ch·ªù", font=('Arial', 10, 'bold')).pack(pady=(10, 4))
    delay_frame = ttk.Frame(right_frame)
    delay_frame.pack()
    ttk.Label(delay_frame, text="Sau khi c∆∞·ª£c (gi√¢y):").grid(row=0, column=0, sticky='w')
    var_delay_bet = tk.StringVar(value=str(DELAY_AFTER_BET))
    ttk.Entry(delay_frame, textvariable=var_delay_bet, width=10).grid(row=0, column=1)
    ttk.Label(delay_frame, text="Sau khi th·∫Øng ch·ªù:").grid(row=1, column=0, sticky='w')
    var_delay_win = tk.StringVar(value=str(DELAY_AFTER_WIN_WAIT))
    ttk.Entry(delay_frame, textvariable=var_delay_win, width=10).grid(row=1, column=1)

    ttk.Label(right_frame, text="üéÆ ƒêi·ªÅu khi·ªÉn", font=('Arial', 10, 'bold')).pack(pady=(10, 4))
    ctrl = ttk.Frame(right_frame)
    ctrl.pack()
    ttk.Button(ctrl, text="‚ñ∂ Start", command=lambda: start_bot(status_var, bet_var, log_box, spark_canvas)).grid(row=0, column=0, padx=3)
    ttk.Button(ctrl, text="‚è∏ Pause", command=pause_bot).grid(row=0, column=1, padx=3)
    ttk.Button(ctrl, text="‚èµ Resume", command=resume_bot).grid(row=0, column=2, padx=3)
    ttk.Button(ctrl, text="‚èπ Stop", command=lambda: stop_bot(status_var)).grid(row=0, column=3, padx=3)

    draw_sparkline(spark_canvas)
    root.mainloop()


def _parse_args(argv=None):
    parser = argparse.ArgumentParser(description="Auto Bot Winluck v4_pro")
    parser.add_argument('--selftest', action='store_true', help='Ch·∫°y ki·ªÉm th·ª≠ nhanh (kh√¥ng c·∫ßn GUI)')
    return parser.parse_args(argv)


if __name__ == "__main__":
    args = _parse_args()
    if args.selftest:
        # ch·∫°y test kh√¥ng t·∫°o GUI, h·ªØu √≠ch tr√™n m√¥i tr∆∞·ªùng sandbox thi·∫øu matplotlib
        run_self_tests()
    else:
        main_gui()
