import time
import threading
import logging
from tkinter import ttk
import pyautogui
import pytesseract
import cv2
import numpy as np
from PIL import Image
import tkinter as tk
import json
import os
import subprocess
from datetime import datetime
import sys
import argparse
import customtkinter as ctk
from tkinter import messagebox, filedialog
import atexit
from telegram_notifier import telegram_notifier

# ============================
#  Auto Bot Winluck v4_pro
#  Nh√°nh: (2) C·∫£i ti·∫øn GUI + (4) T·ªëi ∆∞u k·ªπ thu·∫≠t
# ============================

# ƒë·∫£m b·∫£o th∆∞ m·ª•c logs/profiles t·ªìn t·∫°i tr∆∞·ªõc khi t·∫°o handler
if not os.path.exists("logs"):
    os.makedirs("logs")
if not os.path.exists("profiles"):
    os.makedirs("profiles")

log_filename = f"logs/bot_log_{datetime.now().strftime('%Y-%m-%d')}.txt"

def setup_logging():
    """
    Thi·∫øt l·∫≠p logger m·ªôt c√°ch ch·∫Øc ch·∫Øn:
    - X√≥a handlers c≈© (n·∫øu c√≥) ƒë·ªÉ tr√°nh double logging ho·∫∑c handler l·ªói
    - T·∫°o FileHandler v·ªõi ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi v√† encoding utf-8
    - T·∫°o StreamHandler cho console
    - ƒêƒÉng k√Ω atexit ƒë·ªÉ ƒë√≥ng/flush handlers khi tho√°t
    """
    global log_filename
    log_path = os.path.abspath(log_filename)
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # x√≥a handlers c≈© (n·∫øu c√≥)
    for h in logger.handlers[:]:
        try:
            logger.removeHandler(h)
            h.close()
        except Exception:
            pass

    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')

    # T·∫°o FileHandler an to√†n
    try:
        fh = logging.FileHandler(log_path, encoding="utf-8", mode="a")
        fh.setLevel(logging.INFO)
        fh.setFormatter(formatter)
        logger.addHandler(fh)
    except Exception as e:
        # N·∫øu kh√¥ng th·ªÉ t·∫°o file (quy·ªÅn, disk full, v.v) -> log c·∫£nh b√°o l√™n console
        sh = logging.StreamHandler()
        sh.setLevel(logging.WARNING)
        sh.setFormatter(formatter)
        logger.addHandler(sh)
        logger.warning(f"Kh√¥ng th·ªÉ t·∫°o FileHandler cho '{log_path}': {e}")

    # Th√™m StreamHandler ƒë·ªÉ v·∫´n nh√¨n ƒë∆∞·ª£c log tr√™n console
    sh2 = logging.StreamHandler()
    sh2.setLevel(logging.INFO)
    sh2.setFormatter(formatter)
    logger.addHandler(sh2)

    # ƒê·∫£m b·∫£o handlers ƒë∆∞·ª£c ƒë√≥ng khi process exit
    atexit.register(logging.shutdown)

# g·ªçi setup_logging ngay sau khi x√°c nh·∫≠n th∆∞ m·ª•c t·ªìn t·∫°i
setup_logging()

DEFAULT_TESS = r"C:\\Program Files\\Tesseract-OCR\\tesseract.exe"
try:
    pytesseract.pytesseract.tesseract_cmd = DEFAULT_TESS
except Exception:
    pass
TESSERACT_LANG = 'vie'

DELAY_AFTER_BET = 10
DELAY_AFTER_WIN_WAIT = 18

TELE_REGION = (28, 989, 197, 82)
# # Region ƒë·ªÉ OCR s·ªë ti·ªÅn hi·ªÉn th·ªã sau khi g·ª≠i c∆∞·ª£c.
AMOUNT_REGION = (844, 404, 94, 35)

BTN_LON_POS = (623, 837)
BTN_NHO_POS = (804, 837)
BET_BOX_POS = (757, 958)
BTN_GUI_POS = (731, 1089)
TELE_CLICK_POS = (428, 1032)
# TELE_CLOSE_POS ƒë√£ b·ªã xo√° theo y√™u c·∫ßu.

BET_LEVELS = [1000, 2000, 4000, 8000, 17000, 34000, 68000]

bet_index = 0
bot_running = False
bot_paused = False

# L·ª£i nhu·∫≠n d·ª±a tr√™n s·ªë ti·ªÅn ƒë·∫ßu ti√™n
initial_amount = None     # l∆∞u s·ªë ti·ªÅn hi·ªán t·∫°i ƒë·∫ßu ti√™n
profit = 0                # l·ª£i nhu·∫≠n = current - initial_amount
last_bet_amount = None    # ti·ªÅn c∆∞·ª£c l·∫ßn g·∫ßn nh·∫•t (ƒë·ªÉ theo d√µi v√°n)

click_lock = threading.Lock()

history = []
HISTORY_MAX = 60

def play_sound(win=True):
    # H√†m √¢m thanh ƒë√£ b·ªã lo·∫°i b·ªè theo y√™u c·∫ßu
    pass

def get_text_from_region(region):
    try:
        im = pyautogui.screenshot(region=region)
        im = im.convert('RGB')
        arr = np.array(im)
        gray = cv2.cvtColor(arr, cv2.COLOR_BGR2GRAY)
        _, th = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        pil = Image.fromarray(th)
        config = '--psm 6'
        text = pytesseract.image_to_string(pil, lang=TESSERACT_LANG, config=config)
        return text.strip().upper()
    except Exception as e:
        logging.error(f"OCR error: {e}")
        return ""

def get_amount_from_region(region):
    """
    OCR chuy√™n d·ª•ng cho s·ªë ti·ªÅn v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh kh√°c nhau
    ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
    """
    try:
        im = pyautogui.screenshot(region=region)
        im = im.convert('RGB')
        arr = np.array(im)
        
        # Th·ª≠ nhi·ªÅu ph∆∞∆°ng ph√°p x·ª≠ l√Ω ·∫£nh kh√°c nhau
        methods = []
        
        # Ph∆∞∆°ng ph√°p 1: Grayscale + OTSU threshold
        gray = cv2.cvtColor(arr, cv2.COLOR_BGR2GRAY)
        _, th1 = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        methods.append(th1)
        
        # Ph∆∞∆°ng ph√°p 2: Adaptive threshold
        th2 = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        methods.append(th2)
        
        # Ph∆∞∆°ng ph√°p 3: Threshold v·ªõi gi√° tr·ªã c·ªë ƒë·ªãnh
        _, th3 = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)
        methods.append(th3)
        
        # Ph∆∞∆°ng ph√°p 4: Invert + threshold
        _, th4 = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
        methods.append(th4)
        
        # Th·ª≠ OCR v·ªõi t·ª´ng ph∆∞∆°ng ph√°p
        results = []
        configs = [
            '--psm 6 -c tessedit_char_whitelist=0123456789.,',  # Ch·ªâ s·ªë v√† d·∫•u
            '--psm 7 -c tessedit_char_whitelist=0123456789.,',  # Single text line
            '--psm 8 -c tessedit_char_whitelist=0123456789.,',  # Single word
            '--psm 13 -c tessedit_char_whitelist=0123456789.,'  # Raw line
        ]
        
        for method in methods:
            pil = Image.fromarray(method)
            for config in configs:
                try:
                    text = pytesseract.image_to_string(pil, config=config)
                    cleaned = text.strip().replace(' ', '').replace('\n', '')
                    if cleaned and any(c.isdigit() for c in cleaned):
                        results.append(cleaned)
                except Exception:
                    continue
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ ph·ªï bi·∫øn nh·∫•t ho·∫∑c d√†i nh·∫•t
        if results:
            # ∆Øu ti√™n k·∫øt qu·∫£ c√≥ nhi·ªÅu ch·ªØ s·ªë nh·∫•t
            results.sort(key=lambda x: len([c for c in x if c.isdigit()]), reverse=True)
            return results[0]
        
        return ""
        
    except Exception as e:
        logging.error(f"OCR amount error: {e}")
        return ""

def click_at(pos, desc="v·ªã tr√≠"):
    try:
        with click_lock:
            pyautogui.moveTo(pos[0], pos[1], duration=0.15)
            pyautogui.click()
            time.sleep(0.3)
    except Exception as e:
        logging.error(f"L·ªói click {desc}: {e}")

def _clean_detected_amount(raw: str):
    """
    L√†m s·∫°ch chu·ªói OCR:
    - X·ª≠ l√Ω nhi·ªÅu ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn kh√°c nhau
    - B·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    - Tr·∫£ v·ªÅ int n·∫øu th√†nh c√¥ng, ho·∫∑c None.
    """
    if not raw:
        return None
    
    s = raw.strip()
    if not s:
        return None
    
    # Th·ª≠ nhi·ªÅu c√°ch x·ª≠ l√Ω kh√°c nhau
    attempts = [
        s,                          # Nguy√™n g·ªëc
        s[:-1] if len(s) > 1 else s,  # B·ªè k√Ω t·ª± cu·ªëi
        s.replace(',', '').replace('.', ''),  # B·ªè d·∫•u ph√¢n c√°ch
        s.replace('D', '').replace('ƒë', '').replace('ƒê', ''),  # B·ªè k√Ω hi·ªáu ti·ªÅn t·ªá
    ]
    
    # Th√™m c√°c bi·∫øn th·ªÉ kh√°c
    for attempt in attempts[:]:
        attempts.append(attempt.lstrip('-').strip())  # B·ªè d·∫•u tr·ª´ ƒë·∫ßu
        attempts.append(''.join(c for c in attempt if c.isdigit() or c in '.,'))  # Ch·ªâ gi·ªØ s·ªë v√† d·∫•u
    
    for attempt in attempts:
        # L·∫•y ch·ªâ c√°c ch·ªØ s·ªë
        digits = ''.join(ch for ch in attempt if ch.isdigit())
        if digits and len(digits) >= 3:  # √çt nh·∫•t 3 ch·ªØ s·ªë (tr√°nh s·ªë qu√° nh·ªè)
            try:
                result = int(digits)
                # Ki·ªÉm tra kho·∫£ng h·ª£p l√Ω (t·ª´ 1000 ƒë·∫øn 999 tri·ªáu)
                if 1000 <= result <= 999999999:
                    return result
            except Exception:
                continue
    
    return None

def _scan_balance_and_log(log_box=None):
    """
    Qu√©t AMOUNT_REGION, l√†m s·∫°ch chu·ªói, t√≠nh l·ª£i nhu·∫≠n so v·ªõi initial_amount.
    Tr·∫£ v·ªÅ tuple (cleaned_value or None, profit or None)
    - N·∫øu initial_amount is None: l∆∞u initial_amount v√† profit = 0 (l·∫ßn ƒë·∫ßu)
    - N·∫øu c√≥ initial_amount: profit = cleaned - initial_amount
    """
    global initial_amount, profit
    try:
        # refresh giao di·ªán tr∆∞·ªõc khi qu√©t (n·∫øu c·∫ßn)
        try:
            click_at(BET_BOX_POS, "L√†m m·ªõi")
            pyautogui.hotkey('ctrl', 'r')
            time.sleep(0.15)
        except Exception:
            # kh√¥ng quan tr·ªçng n·∫øu refresh kh√¥ng th√†nh c√¥ng
            pass

        # Th·ª≠ OCR c·∫£i ti·∫øn tr∆∞·ªõc
        detected = get_amount_from_region(AMOUNT_REGION)
        cleaned = _clean_detected_amount(detected)
        
        # N·∫øu kh√¥ng th√†nh c√¥ng, th·ª≠ ph∆∞∆°ng ph√°p c≈©
        if cleaned is None:
            detected_fallback = get_text_from_region(AMOUNT_REGION)
            cleaned = _clean_detected_amount(detected_fallback)
            
        if cleaned is None:
            msg = f"üîé OCR: kh√¥ng ƒë·ªçc ƒë∆∞·ª£c gi√° tr·ªã hi·ªÉn th·ªã (r·ªóng). Raw: '{detected}'"
            logging.info(msg)
            if log_box is not None:
                log_box.insert("end", msg + "\n"); log_box.see("end")
            return None, None

        # N·∫øu l·∫ßn ƒë·∫ßu
        if initial_amount is None:
            initial_amount = cleaned
            profit = 0
            msg = f"üí∞ Money: {cleaned:,d} VND ‚Äî L·ª£i Nhu·∫≠n: {profit:+,d} VND"
        else:
            profit = cleaned - initial_amount
            msg = f"üí∞ Money: {cleaned:,d} VND ‚Äî L·ª£i Nhu·∫≠n: {profit:+,d} VND"
        
        logging.info(msg)
        if log_box is not None:
            log_box.insert("end", msg + "\n"); log_box.see("end")
        return cleaned, profit
        
    except Exception as e:
        error_msg = f"üîé L·ªói khi qu√©t OCR khu v·ª±c s·ªë ti·ªÅn: {e}"
        logging.exception(error_msg)
        if log_box is not None:
            log_box.insert("end", error_msg + "\n"); log_box.see("end")
        return None, None

def input_bet_and_send(amount, log_box=None):
    """
    Nh·∫≠p amount v√†o √¥ BET, g·ª≠i, ESC v√† click Telegram.
    Sau khi g·ª≠i xong s·∫Ω qu√©t khu v·ª±c AMOUNT_REGION b·∫±ng OCR v√†
    ghi th√¥ng tin v√†o nh·∫≠t k√Ω (file + GUI log_box n·∫øu c√≥).
    T√≠nh L·ª£i Nhu·∫≠n theo ph∆∞∆°ng √°n 1: ch√™nh l·ªách s·ªë d∆∞ (current - prev), c·ªông d·ªìn.
    """
    try:
        click_at(BET_BOX_POS, "√¥ BET")
        pyautogui.hotkey('ctrl', 'a')
        pyautogui.press('backspace')
        pyautogui.typewrite(str(amount))
        time.sleep(0.4)
        click_at(BTN_GUI_POS, "n√∫t G·ª¨I")
        time.sleep(0.6)
        pyautogui.hotkey('esc')
        time.sleep(0.1)
        click_telegram()

        # ƒê·ª£i giao di·ªán c·∫≠p nh·∫≠t r·ªìi qu√©t s·ªë d∆∞
        time.sleep(0.6)
        _scan_balance_and_log(log_box=log_box)

    except Exception as e:
        logging.error(f"L·ªói nh·∫≠p & g·ª≠i h·ªá s·ªë: {e}")
        if log_box is not None:
            log_box.insert("end", f"‚ö†Ô∏è L·ªói nh·∫≠p & g·ª≠i h·ªá s·ªë: {e}\n"); log_box.see("end")

def perform_click(prediction, amount, log_box=None):
    """
    G·ªçi khi nh·∫•n L·ªöN/NH·ªé: ƒë·∫∑t last_bet_amount tr∆∞·ªõc khi g·ª≠i ƒë·ªÉ
    bot_loop c√≥ th·ªÉ theo d√µi v√°n (n·∫øu c·∫ßn).
    """
    global last_bet_amount
    try:
        # ƒë·∫£m b·∫£o l∆∞u last_bet_amount l√† int khi c√≥ th·ªÉ
        try:
            last_bet_amount = int(amount)
        except Exception:
            last_bet_amount = amount
        if prediction == "LON":
            click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 1)")
            pyautogui.hotkey('ctrl', 'r')
            time.sleep(2)
            click_at(BTN_LON_POS, "n√∫t L·ªöN (l·∫ßn 2)")
        elif prediction == "NHO":
            click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 1)")
            pyautogui.hotkey('ctrl', 'r')
            time.sleep(2)
            click_at(BTN_NHO_POS, "n√∫t NH·ªé (l·∫ßn 2)")
        # truy·ªÅn log_box xu·ªëng ƒë·ªÉ input_bet_and_send c√≥ th·ªÉ c·∫≠p nh·∫≠t nh·∫≠t k√Ω GUI
        input_bet_and_send(amount, log_box=log_box)
    except Exception as e:
        logging.error(f"L·ªói perform_click: {e}")
        if log_box is not None:
            log_box.insert("end", f"‚ö†Ô∏è L·ªói perform_click: {e}\n"); log_box.see("end")

def click_telegram():
    click_at(TELE_CLICK_POS, "Telegram b√™n tr√°i")
    pyautogui.hotkey('enter')

def push_history(val, canvas, stats_var=None):
    history.append(val)
    if len(history) > HISTORY_MAX:
        history.pop(0)
    draw_sparkline(canvas)
    
    # C·∫≠p nh·∫≠t th·ªëng k√™ real-time
    if stats_var is not None:
        update_stats(stats_var)

def update_stats(stats_var):
    """C·∫≠p nh·∫≠t th·ªëng k√™ real-time"""
    win_count = len([h for h in history if h == 1])
    lose_count = len([h for h in history if h == 0])
    total_games = len(history)
    
    if total_games > 0:
        win_rate = (win_count / total_games) * 100
        stats_text = f"üìà Th·∫Øng: {win_count} | Thua: {lose_count} | T·ª∑ l·ªá: {win_rate:.1f}%"
    else:
        stats_text = "üìà Ch∆∞a c√≥ d·ªØ li·ªáu"
    
    stats_var.set(stats_text)

def draw_sparkline(canvas):
    canvas.delete("all")
    w = int(canvas["width"])
    h = int(canvas["height"])
    n = len(history)
    if n <= 1:
        return
    def y_map(v):
        return int(h*0.5) if v == -1 else (int(h*0.8) if v == 0 else int(h*0.2))
    step = max(1, w // (HISTORY_MAX-1))
    points = []
    x = w - step*(n-1)
    for i, v in enumerate(history):
        points.append((x + i*step, y_map(v)))
    canvas.create_line(0, h*0.5, w, h*0.5, fill="#777", dash=(2,2))
    for i in range(len(points)-1):
        x1, y1 = points[i]
        x2, y2 = points[i+1]
        color = "#4CAF50" if history[i+1] == 1 else ("#F44336" if history[i+1] == 0 else "#2196F3")
        canvas.create_line(x1, y1, x2, y2, fill=color, width=2)

def bot_loop(status_var, bet_var, log_box, spark_canvas, profit_var, stats_var):
    global bet_index, bot_running, bot_paused, last_bet_amount
    last_prediction = None
    waiting_for_win = False
    def log_msg(msg):
        log_box.insert("end", msg + "\n")
        log_box.see("end")
        logging.info(msg)
    set_status(status_var, "üîÑ ƒêang ch·∫°y...", style="green")
    da_click_telegram = False
    
    # Reset profit tracking
    global initial_amount, profit
    initial_amount = None
    profit = 0
    profit_var.set("üí∞ L·ª£i nhu·∫≠n: +0 VND")
    
    # Initialization: click telegram -> enter -> scan for first L·ªöN/NH·ªé
    log_msg("üöÄ Kh·ªüi t·∫°o bot")
    try:
        click_telegram()
        time.sleep(0.3)
        pyautogui.hotkey('enter')
        time.sleep(1.0)
        da_click_telegram = True
        log_msg("‚úÖ Kh·ªüi t·∫°o th√†nh c√¥ng. Bot s·∫µn s√†ng ch·∫°y.")
    except Exception as e:
        log_msg(f"‚ùå L·ªói kh·ªüi t·∫°o bot: {e}")
        logging.exception(f"L·ªói kh·ªüi t·∫°o: {e}")
        set_status(status_var, f"‚ùå L·ªói kh·ªüi t·∫°o: {e}", style="red")
        return
    
    while bot_running:
        try:
            while bot_paused and bot_running:
                set_status(status_var, "‚è∏ Paused ‚Äî bot ƒëang t·∫°m d·ª´ng", style="yellow")
                time.sleep(0.3)
            if not bot_running:
                break
            if not da_click_telegram:
                click_telegram()
                da_click_telegram = True
            text = get_text_from_region(TELE_REGION).replace('\n', ' ')
            if "TH·∫ÆNG" in text:
                play_sound(win=True)
                if waiting_for_win:
                    old_bet = BET_LEVELS[bet_index]
                    if bet_index < len(BET_LEVELS) - 1:
                        bet_index += 1
                        log_msg(f"üü¢ KQ: TH·∫ÆNG (ch·ªù) ‚Üí tƒÉng h·ªá s·ªë l√™n: {BET_LEVELS[bet_index]}")
                        # G·ª≠i th√¥ng b√°o Telegram v·ªÅ thay ƒë·ªïi h·ªá s·ªë
                        try:
                            telegram_notifier.send_bet_change(old_bet, BET_LEVELS[bet_index], "Th·∫Øng - tƒÉng h·ªá s·ªë")
                        except Exception as e:
                            logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram thay ƒë·ªïi h·ªá s·ªë: {e}")
                    else:
                        # ƒêang ·ªü h·ªá s·ªë cu·ªëi v√† th·∫Øng ‚Üí reset v·ªÅ ƒë·∫ßu
                        bet_index = 0
                        log_msg(f"üü¢ KQ: TH·∫ÆNG (ch·ªù) ·ªü h·ªá s·ªë cu·ªëi ‚Üí RESET v·ªÅ h·ªá s·ªë ƒë·∫ßu: {BET_LEVELS[bet_index]}")
                        # G·ª≠i th√¥ng b√°o Telegram v·ªÅ reset h·ªá s·ªë
                        try:
                            telegram_notifier.send_bet_change(old_bet, BET_LEVELS[bet_index], "Th·∫Øng ·ªü h·ªá s·ªë cu·ªëi - reset v·ªÅ ƒë·∫ßu")
                        except Exception as e:
                            logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram reset h·ªá s·ªë: {e}")
                    push_history(1, spark_canvas, stats_var)
                    waiting_for_win = False
                    last_prediction = None
                    countdown(status_var, "üïí Update Telegram...", 5)
                    click_telegram()
                    countdown(status_var, f"‚è≥ Ch·ªù Telegram c·∫≠p nh·∫≠t...", DELAY_AFTER_WIN_WAIT)
                    continue
                else:
                    log_msg("üü¢ KQ: TH·∫ÆNG ‚Üí reset h·ªá s·ªë v·ªÅ 1000")
                    # ƒê·ª£i giao di·ªán c·∫≠p nh·∫≠t r·ªìi qu√©t s·ªë d∆∞, c·∫≠p nh·∫≠t profit theo ch√™nh l·ªách
                    time.sleep(0.2)
                    balance, profit_val = _scan_balance_and_log(log_box=log_box)
                    if profit_val is not None:
                        profit_var.set(f"üí∞ L·ª£i nhu·∫≠n: {profit_val:+,d} VND")
                        # G·ª≠i th√¥ng b√°o Telegram v·ªÅ k·∫øt qu·∫£ th·∫Øng
                        try:
                            telegram_notifier.send_game_result("WIN", BET_LEVELS[bet_index], balance, profit_val)
                        except Exception as e:
                            logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram k·∫øt qu·∫£ th·∫Øng: {e}")
                    push_history(1, spark_canvas, stats_var)
                    bet_index = 0
                    last_prediction = None
                    countdown(status_var, "üïí Ngh·ªâ ng·∫Øn...", 20)
                    da_click_telegram = False
                    continue
            if "THUA" in text:
                play_sound(win=False)
                push_history(0, spark_canvas, stats_var)
                # ƒê·ª£i giao di·ªán c·∫≠p nh·∫≠t r·ªìi qu√©t s·ªë d∆∞, c·∫≠p nh·∫≠t profit
                time.sleep(0.2)
                balance, profit_val = _scan_balance_and_log(log_box=log_box)
                if profit_val is not None:
                    profit_var.set(f"üí∞ L·ª£i nhu·∫≠n: {profit_val:+,d} VND")
                    # G·ª≠i th√¥ng b√°o Telegram v·ªÅ k·∫øt qu·∫£ thua
                    try:
                        telegram_notifier.send_game_result("LOSE", BET_LEVELS[bet_index], balance, profit_val)
                    except Exception as e:
                        logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram k·∫øt qu·∫£ thua: {e}")
                
                # Logic m·ªõi: Ki·ªÉm tra n·∫øu ƒë√£ ·ªü h·ªá s·ªë cu·ªëi c√πng
                if bet_index >= len(BET_LEVELS) - 1:
                    log_msg(f"üî¥ KQ: THUA ·ªü h·ªá s·ªë cu·ªëi ({BET_LEVELS[bet_index]}) ‚Üí ƒê·ª£i TH·∫ÆNG ƒë·ªÉ reset v·ªÅ ƒë·∫ßu")
                    # KH√îNG reset bet_index ·ªü ƒë√¢y, ch·ªâ ƒë·ª£i th·∫Øng
                    waiting_for_win = True
                    last_prediction = None
                    countdown(status_var, "üîÑ ƒê·ª£i TH·∫ÆNG ƒë·ªÉ reset h·ªá s·ªë...", 52)
                else:
                    log_msg("üî¥ KQ: THUA ‚Üí ch·ªù TH·∫ÆNG")
                    waiting_for_win = True
                    last_prediction = None
                    countdown(status_var, "üïí Ch·ªù ·ªïn ƒë·ªãnh...", 52)
                
                da_click_telegram = False
                continue
            if waiting_for_win:
                set_status(status_var, "‚è≥ ƒêang ch·ªù t√≠n hi·ªáu TH·∫ÆNG ƒë·ªÉ tƒÉng h·ªá s·ªë...", style="yellow")
                time.sleep(0.25)
                continue
            if "L·ªöN" in text or "LON" in text:
                if last_prediction != "LON":
                    set_status(status_var, f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})", style="blue")
                    log_msg(f"‚¨ÜÔ∏è ƒê√°nh L·ªöN ({BET_LEVELS[bet_index]})")
                    push_history(-1, spark_canvas, stats_var)
                    # truy·ªÅn log_box ƒë·ªÉ input_bet_and_send c√≥ th·ªÉ c·∫≠p nh·∫≠t nh·∫≠t k√Ω GUI
                    perform_click("LON", BET_LEVELS[bet_index], log_box=log_box)
                    da_click_telegram = False
                    countdown(status_var, "üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£...", DELAY_AFTER_BET)
                    last_prediction = "LON"
            elif "NH·ªé" in text or "NHO" in text:
                if last_prediction != "NHO":
                    set_status(status_var, f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})", style="blue")
                    log_msg(f"‚¨áÔ∏è ƒê√°nh NH·ªé ({BET_LEVELS[bet_index]})")
                    push_history(-1, spark_canvas, stats_var)
                    perform_click("NHO", BET_LEVELS[bet_index], log_box=log_box)
                    da_click_telegram = False
                    countdown(status_var, "üéØ ƒêang ƒë·ª£i k·∫øt qu·∫£...", DELAY_AFTER_BET)
                    last_prediction = "NHO"
            bet_var.set(f"üéØ H·ªá s·ªë: {BET_LEVELS[bet_index]:,d} VND ({bet_index+1}/{len(BET_LEVELS)})")
            time.sleep(0.6)
        except Exception as e:
            logging.exception(f"L·ªói v√≤ng l·∫∑p: {e}")
            set_status(status_var, f"‚ö†Ô∏è L·ªói: {e}", style="red")
            # G·ª≠i th√¥ng b√°o Telegram v·ªÅ l·ªói
            try:
                telegram_notifier.send_error(str(e), "V√≤ng l·∫∑p bot ch√≠nh")
            except Exception as telegram_error:
                logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram l·ªói: {telegram_error}")
            time.sleep(1.0)
    set_status(status_var, "‚èπ Bot ƒë√£ d·ª´ng", style="red")

def countdown(status_var, label, secs):
    for i in range(secs, 0, -1):
        set_status(status_var, f"{label} {i}s", style="yellow")
        time.sleep(1)

def set_status(status_var, text, style="normal"):
    status_var.set(text)

thread_ref = None

def start_bot(status_var, bet_var, log_box, spark_canvas, profit_var, stats_var):
    global bot_running, bot_paused, thread_ref
    if bot_running:
        logging.warning("‚ö†Ô∏è Bot ƒë√£ ƒëang ch·∫°y, kh√¥ng th·ªÉ kh·ªüi ƒë·ªông l·∫°i!")
        status_var.set("‚ö†Ô∏è Bot ƒë√£ ƒëang ch·∫°y! B·∫•m Stop tr∆∞·ªõc.")
        return
    
    # ƒê·∫£m b·∫£o thread c≈© ƒë√£ k·∫øt th√∫c
    if thread_ref is not None and thread_ref.is_alive():
        logging.warning("‚ö†Ô∏è Thread c≈© v·∫´n ch·∫°y, ch·ªù k·∫øt th√∫c...")
        status_var.set("‚è≥ Ch·ªù thread c≈© k·∫øt th√∫c...")
        thread_ref.join(timeout=2)
    
    bot_running = True
    bot_paused = False
    
    # G·ª≠i th√¥ng b√°o Telegram khi bot kh·ªüi ƒë·ªông
    try:
        telegram_notifier.update_config(initial_bet=BET_LEVELS[0])
        telegram_notifier.send_bot_started()
    except Exception as e:
        logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram kh·ªüi ƒë·ªông: {e}")
    
    thread_ref = threading.Thread(target=bot_loop, args=(status_var, bet_var, log_box, spark_canvas, profit_var, stats_var), daemon=True)
    thread_ref.start()

def stop_bot(status_var):
    global bot_running, bot_paused, thread_ref, bet_index
    bot_running = False
    bot_paused = False
    status_var.set("‚è∏ ƒêang d·ª´ng...")
    
    # G·ª≠i th√¥ng b√°o Telegram khi bot d·ª´ng
    try:
        telegram_notifier.send_bot_stopped("Ng∆∞·ªùi d√πng d·ª´ng")
    except Exception as e:
        logging.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o Telegram d·ª´ng: {e}")
    
    # ƒê·ª£i thread k·∫øt th√∫c an to√†n
    if thread_ref is not None:
        try:
            thread_ref.join(timeout=3)
        except Exception:
            pass
    # Reset bet_index ƒë·ªÉ l·∫ßn ti·∫øp theo b·∫Øt ƒë·∫ßu t·ª´ h·ªá s·ªë ƒë·∫ßu ti√™n
    bet_index = 0
    status_var.set("‚èπ Bot ƒë√£ d·ª´ng")

def pause_bot():
    global bot_paused
    bot_paused = True

def resume_bot():
    global bot_paused
    bot_paused = False

DEFAULT_CONFIG = "config.json"

def save_config_to(path, status_var):
    data = {
        "TELE_REGION": TELE_REGION,
        "AMOUNT_REGION": AMOUNT_REGION,
        "BTN_LON_POS": BTN_LON_POS,
        "BTN_NHO_POS": BTN_NHO_POS,
        "BET_BOX_POS": BET_BOX_POS,
        "BTN_GUI_POS": BTN_GUI_POS,
        "TELE_CLICK_POS": TELE_CLICK_POS,
        "DELAY_AFTER_BET": DELAY_AFTER_BET,
        "DELAY_AFTER_WIN_WAIT": DELAY_AFTER_WIN_WAIT,
        "TESS_CMD": pytesseract.pytesseract.tesseract_cmd,
        "BET_LEVELS": BET_LEVELS,
    }
    try:
        with open(path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        status_var.set(f"üíæ ƒê√£ l∆∞u c·∫•u h√¨nh ‚Üí {os.path.basename(path)}")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói l∆∞u file: {e}")

def open_logs_folder():
    folder_path = os.path.abspath("logs")
    try:
        if os.name == "nt":
            os.startfile(folder_path)
        elif sys.platform == "darwin":
            subprocess.Popen(["open", folder_path])
        else:
            subprocess.Popen(["xdg-open", folder_path])
    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng m·ªü ƒë∆∞·ª£c th∆∞ m·ª•c log!\n{e}")

def load_config_from(path, widgets, status_var):
    global TELE_REGION, AMOUNT_REGION, BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS
    global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT, BET_LEVELS
    try:
        with open(path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        TELE_REGION = tuple(data.get("TELE_REGION", TELE_REGION))
        AMOUNT_REGION = tuple(data.get("AMOUNT_REGION", AMOUNT_REGION))
        BTN_LON_POS = tuple(data.get("BTN_LON_POS", BTN_LON_POS))
        BTN_NHO_POS = tuple(data.get("BTN_NHO_POS", BTN_NHO_POS))
        BET_BOX_POS = tuple(data.get("BET_BOX_POS", BET_BOX_POS))
        BTN_GUI_POS = tuple(data.get("BTN_GUI_POS", BTN_GUI_POS))
        TELE_CLICK_POS = tuple(data.get("TELE_CLICK_POS", TELE_CLICK_POS))
        DELAY_AFTER_BET = int(data.get("DELAY_AFTER_BET", DELAY_AFTER_BET))
        DELAY_AFTER_WIN_WAIT = int(data.get("DELAY_AFTER_WIN_WAIT", DELAY_AFTER_WIN_WAIT))
        pytesseract.pytesseract.tesseract_cmd = data.get("TESS_CMD", pytesseract.pytesseract.tesseract_cmd)
        BET_LEVELS = list(data.get("BET_LEVELS", BET_LEVELS))

        # Update widget values to reflect loaded config
        widgets["entry_lon"].delete(0, tk.END); widgets["entry_lon"].insert(0, f"{BTN_LON_POS[0]}, {BTN_LON_POS[1]}")
        widgets["entry_nho"].delete(0, tk.END); widgets["entry_nho"].insert(0, f"{BTN_NHO_POS[0]}, {BTN_NHO_POS[1]}")
        widgets["entry_bet"].delete(0, tk.END); widgets["entry_bet"].insert(0, f"{BET_BOX_POS[0]}, {BET_BOX_POS[1]}")
        widgets["entry_gui"].delete(0, tk.END); widgets["entry_gui"].insert(0, f"{BTN_GUI_POS[0]}, {BTN_GUI_POS[1]}")
        widgets["entry_tele"].delete(0, tk.END); widgets["entry_tele"].insert(0, f"{TELE_CLICK_POS[0]}, {TELE_CLICK_POS[1]}")
        widgets["entry_amount"].delete(0, tk.END); widgets["entry_amount"].insert(0, f"{AMOUNT_REGION[0]}, {AMOUNT_REGION[1]}, {AMOUNT_REGION[2]}, {AMOUNT_REGION[3]}")
        widgets["var_delay_bet"].delete(0, tk.END); widgets["var_delay_bet"].insert(0, str(DELAY_AFTER_BET))
        widgets["var_delay_win"].delete(0, tk.END); widgets["var_delay_win"].insert(0, str(DELAY_AFTER_WIN_WAIT))
        widgets["entry_tess"].delete(0, tk.END); widgets["entry_tess"].insert(0, pytesseract.pytesseract.tesseract_cmd)
        widgets["entry_levels"].delete(0, tk.END); widgets["entry_levels"].insert(0, ",".join(map(str, BET_LEVELS)))
        
        # Load Telegram config if available
        if "entry_token" in widgets:
            widgets["entry_token"].delete(0, tk.END)
            widgets["entry_token"].insert(0, telegram_notifier.config.get("bot_token", ""))
        if "entry_chat" in widgets:
            widgets["entry_chat"].delete(0, tk.END)
            widgets["entry_chat"].insert(0, telegram_notifier.config.get("chat_id", ""))
        if "var_telegram_enabled" in widgets:
            widgets["var_telegram_enabled"].set(telegram_notifier.config.get("enabled", False))
        if "var_notify_start" in widgets:
            widgets["var_notify_start"].set(telegram_notifier.config.get("notify_on_start", True))
        if "var_notify_stop" in widgets:
            widgets["var_notify_stop"].set(telegram_notifier.config.get("notify_on_stop", True))
        if "var_notify_win" in widgets:
            widgets["var_notify_win"].set(telegram_notifier.config.get("notify_on_win", True))
        if "var_notify_lose" in widgets:
            widgets["var_notify_lose"].set(telegram_notifier.config.get("notify_on_lose", True))
        if "var_notify_error" in widgets:
            widgets["var_notify_error"].set(telegram_notifier.config.get("notify_on_error", True))
        if "var_notify_balance" in widgets:
            widgets["var_notify_balance"].set(telegram_notifier.config.get("notify_balance_updates", True))
        if "var_notify_bet" in widgets:
            widgets["var_notify_bet"].set(telegram_notifier.config.get("notify_bet_changes", True))
        
        status_var.set(f"üì• ƒê√£ n·∫°p c·∫•u h√¨nh t·ª´ {os.path.basename(path)}")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói n·∫°p file: {e}")

def pick_position(focused_key, entries_map, status_var, root):
    active = focused_key.get()
    if not active:
        messagebox.showwarning("Ch∆∞a ch·ªçn √¥", "H√£y click v√†o √¥ b·∫°n mu·ªën g√°n t·ªça ƒë·ªô tr∆∞·ªõc!")
        return
    for i in range(2, 0, -1):
        status_var.set(f"üïê Di chu·ªôt ƒë·∫øn v·ªã tr√≠ cho '{active}' ... ({i})")
        root.update()
        time.sleep(1)
    pos = pyautogui.position()
    entries_map[active].delete(0, tk.END)
    entries_map[active].insert(0, f"{pos.x}, {pos.y}")
    root.clipboard_clear(); root.clipboard_append(f"{pos.x}, {pos.y}")
    messagebox.showinfo("T·ªça ƒë·ªô m·ªõi", f"{active} = ({pos.x}, {pos.y})")
    status_var.set(f"üìç G√°n th√†nh c√¥ng {active} = ({pos.x}, {pos.y})")

def apply_updates(widgets, status_var, save=False, path=DEFAULT_CONFIG):
    global BTN_LON_POS, BTN_NHO_POS, BET_BOX_POS, BTN_GUI_POS, TELE_CLICK_POS
    global DELAY_AFTER_BET, DELAY_AFTER_WIN_WAIT, BET_LEVELS, AMOUNT_REGION
    try:
        BTN_LON_POS = tuple(map(int, widgets["entry_lon"].get().split(',')))
        BTN_NHO_POS = tuple(map(int, widgets["entry_nho"].get().split(',')))
        BET_BOX_POS = tuple(map(int, widgets["entry_bet"].get().split(',')))
        BTN_GUI_POS = tuple(map(int, widgets["entry_gui"].get().split(',')))
        TELE_CLICK_POS = tuple(map(int, widgets["entry_tele"].get().split(',')))
        # X·ª≠ l√Ω AMOUNT_REGION (4 gi√° tr·ªã: x, y, width, height)
        AMOUNT_REGION = tuple(map(int, widgets["entry_amount"].get().split(',')))
        DELAY_AFTER_BET = int(widgets["var_delay_bet"].get())
        DELAY_AFTER_WIN_WAIT = int(widgets["var_delay_win"].get())
        pytesseract.pytesseract.tesseract_cmd = widgets["entry_tess"].get().strip()
        levels = [int(x.strip()) for x in widgets["entry_levels"].get().split(',') if x.strip()]
        if levels:
            BET_LEVELS = levels
        if save:
            save_config_to(path, status_var)
        else:
            status_var.set("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!")
    except ValueError:
        status_var.set("‚ö†Ô∏è L·ªói: Delay / t·ªça ƒë·ªô / levels ph·∫£i l√† s·ªë nguy√™n!")
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói: {e}")

def save_telegram_config(widgets, status_var):
    """L∆∞u c·∫•u h√¨nh Telegram"""
    try:
        bot_token = widgets["entry_token"].get().strip()
        chat_id = widgets["entry_chat"].get().strip()
        enabled = bool(widgets["var_telegram_enabled"].get())
        notify_start = bool(widgets["var_notify_start"].get())
        notify_stop = bool(widgets["var_notify_stop"].get())
        notify_win = bool(widgets["var_notify_win"].get())
        notify_lose = bool(widgets["var_notify_lose"].get())
        notify_error = bool(widgets["var_notify_error"].get())
        notify_balance = bool(widgets["var_notify_balance"].get())
        notify_bet = bool(widgets["var_notify_bet"].get())
        
        telegram_notifier.update_config(
            bot_token=bot_token,
            chat_id=chat_id,
            enabled=enabled,
            notify_on_start=notify_start,
            notify_on_stop=notify_stop,
            notify_on_win=notify_win,
            notify_on_lose=notify_lose,
            notify_on_error=notify_error,
            notify_balance_updates=notify_balance,
            notify_bet_changes=notify_bet
        )
        
        status_var.set("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh Telegram!")
        
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói l∆∞u c·∫•u h√¨nh Telegram: {e}")

def test_telegram_connection(widgets, status_var):
    """Test k·∫øt n·ªëi Telegram"""
    try:
        # L∆∞u c·∫•u h√¨nh t·∫°m th·ªùi ƒë·ªÉ test
        bot_token = widgets["entry_token"].get().strip()
        chat_id = widgets["entry_chat"].get().strip()
        
        if not bot_token or not chat_id:
            status_var.set("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Bot Token v√† Chat ID!")
            return
        
        # C·∫≠p nh·∫≠t c·∫•u h√¨nh t·∫°m th·ªùi
        telegram_notifier.update_config(
            bot_token=bot_token,
            chat_id=chat_id,
            enabled=True
        )
        
        status_var.set("üîÑ ƒêang test k·∫øt n·ªëi Telegram...")
        
        # Test trong thread ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n UI
        def test_thread():
            try:
                success, message = telegram_notifier.test_connection()
                if success:
                    status_var.set("‚úÖ Test Telegram th√†nh c√¥ng!")
                else:
                    status_var.set(f"‚ùå Test Telegram th·∫•t b·∫°i: {message}")
            except Exception as e:
                status_var.set(f"‚ùå L·ªói test Telegram: {e}")
        
        threading.Thread(target=test_thread, daemon=True).start()
        
    except Exception as e:
        status_var.set(f"‚ö†Ô∏è L·ªói test Telegram: {e}")

def main_gui():
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("dark-blue")

    root = ctk.CTk()
    root.title("Auto Bot Winluck v4_pro")
    root.geometry("670x760")
    root.resizable(False, False)

    try:
        root.config(menu=tk.Menu(root))
    except Exception:
        pass

    content = ctk.CTkFrame(root, fg_color="#181a1b")
    content.pack(fill="both", expand=True, padx=0, pady=(0,0))

    left = ctk.CTkFrame(content, fg_color="#232323")
    left.pack(side="left", fill="y", padx=(0,6), pady=8)
    right = ctk.CTkFrame(content, fg_color="#22252a")
    right.pack(side="left", fill="both", expand=True, padx=(0,0), pady=8)

    # --- Left column ---
    status_var = ctk.StringVar(value="‚è∏ Ch∆∞a ch·∫°y")
    bet_var = ctk.StringVar(value=f"üéØ H·ªá s·ªë: {BET_LEVELS[0]:,d} VND (1/{len(BET_LEVELS)})" if BET_LEVELS else "üéØ H·ªá s·ªë: 0 VND")
    profit_var = ctk.StringVar(value="üí∞ L·ª£i nhu·∫≠n: +0 VND")
    ctk.CTkLabel(left, text="üü¢ Tr·∫°ng th√°i bot:", font=("Arial", 12, "bold"), text_color="#1aafff", fg_color="transparent").pack(anchor="w", pady=(8,2), padx=12)
    ctk.CTkLabel(left, textvariable=status_var, font=("Arial", 12, "bold"), text_color="#40cfff", fg_color="transparent").pack(anchor="w", padx=12)
    ctk.CTkLabel(left, textvariable=bet_var, font=("Arial", 12), text_color="#1aafff", fg_color="transparent").pack(anchor="w", pady=(2,2), padx=12)
    ctk.CTkLabel(left, textvariable=profit_var, font=("Arial", 12, "bold"), text_color="#4CAF50", fg_color="transparent").pack(anchor="w", pady=(0,2), padx=12)
    ctk.CTkLabel(left, text="üìä Dashboard (60 g·∫ßn nh·∫•t)", font=('Arial', 12, 'bold'), text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(2,2), padx=12)
    
    # Th√™m th·ªëng k√™ nhanh - s·ª≠ d·ª•ng StringVar ƒë·ªÉ c·∫≠p nh·∫≠t real-time
    stats_frame = ctk.CTkFrame(left, fg_color="#181a1b", corner_radius=6, border_width=1, border_color="#393e46")
    stats_frame.pack(fill='x', padx=12, pady=(0,8))
    
    stats_var = ctk.StringVar(value="üìà Ch∆∞a c√≥ d·ªØ li·ªáu")
    ctk.CTkLabel(stats_frame, textvariable=stats_var, font=("Arial", 11), text_color="#d3d7de", fg_color="transparent").pack(pady=4)
    dashboard = ctk.CTkFrame(left, fg_color="#181a1b", width=360, height=64, corner_radius=6)
    dashboard.pack(pady=(0,2), padx=12)
    dashboard.pack_propagate(False)
    spark_canvas = tk.Canvas(dashboard, width=346, height=60, bg="#181a1b", highlightthickness=0)
    spark_canvas.pack(fill="both", expand=True)

    ctk.CTkLabel(left, text="üßæ Nh·∫≠t k√Ω", font=('Arial', 12, 'bold'), text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(4,1), padx=12)
    log_box = ctk.CTkTextbox(left, width=360, height=145, fg_color="#181a1b", text_color="#d3d7de", font=("Consolas", 11), corner_radius=6, border_width=1, border_color="#393e46")
    log_box.pack(pady=6, padx=12, fill='x')

    # --- Widgets map ---
    widgets = {}

    # --- Section: C·∫•u h√¨nh n√¢ng cao b√™n tr√°i ---
    section_advanced_left = ctk.CTkFrame(left, fg_color="#181a1b", corner_radius=6, border_width=1, border_color="#393e46")
    section_advanced_left.pack(fill='x', padx=12, pady=(0,8))
    
    ctk.CTkLabel(section_advanced_left, text="üõ†Ô∏è C·∫•u h√¨nh n√¢ng cao", font=("Arial", 11, "bold"), text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(6,4), padx=8)
    
    # ƒê∆∞·ªùng d·∫´n Tesseract
    ctk.CTkLabel(section_advanced_left, text="ƒê∆∞·ªùng d·∫´n Tesseract:", font=("Arial", 10), text_color="#d3d7de", fg_color="transparent").pack(anchor='w', pady=(2,1), padx=8)
    entry_tess = ctk.CTkEntry(section_advanced_left, width=340, font=("Arial",10), fg_color="#181a1b", text_color="#d3d7de", border_color="#1aafff", border_width=1)
    entry_tess.insert(0, pytesseract.pytesseract.tesseract_cmd or DEFAULT_TESS)
    entry_tess.pack(anchor='w', padx=8, pady=(0,4))
    widgets["entry_tess"] = entry_tess
    
    # D√£y h·ªá s·ªë c∆∞·ª£c
    ctk.CTkLabel(section_advanced_left, text="D√£y h·ªá s·ªë c∆∞·ª£c (ph√¢n c√°ch ph·∫©y):", font=("Arial", 10), text_color="#d3d7de", fg_color="transparent").pack(anchor='w', pady=(2,1), padx=8)
    entry_levels = ctk.CTkEntry(section_advanced_left, width=340, font=("Arial",10), fg_color="#181a1b", text_color="#d3d7de", border_color="#1aafff", border_width=1)
    entry_levels.insert(0, ",".join(map(str, BET_LEVELS)))
    entry_levels.pack(anchor='w', padx=8, pady=(0,6))
    widgets["entry_levels"] = entry_levels

    # --- Controls d∆∞·ªõi nh·∫≠t k√Ω ---
    ctrl = ctk.CTkFrame(left, fg_color="transparent")
    ctrl.pack(pady=10, padx=12, anchor='w')
    BTN_WIDTH = 108  # ƒê·∫∑t width c√°c n√∫t ƒë·ªÅu nhau
    btn_start = ctk.CTkButton(ctrl, text="‚èµ Start", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: start_bot(status_var, bet_var, log_box, spark_canvas, profit_var, stats_var))
    btn_pause = ctk.CTkButton(ctrl, text="‚è∏ Pause", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: pause_bot())
    btn_resume = ctk.CTkButton(ctrl, text="‚èµ Resume", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: resume_bot())
    btn_stop = ctk.CTkButton(ctrl, text="‚èπ Stop", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: stop_bot(status_var))
    btn_log = ctk.CTkButton(ctrl, text="üìÇ Xem file log", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: open_logs_folder())
    btn_save = ctk.CTkButton(ctrl, text="üíæ L∆∞u config", width=BTN_WIDTH, font=("Arial", 12),
        command=lambda: (apply_updates(widgets, status_var, save=True, path=DEFAULT_CONFIG)))

    # --- Right column ---
    focused_entry = ctk.StringVar(value="")
    def make_entry(parent, label, key, val):
        row = ctk.CTkFrame(parent, fg_color="transparent")
        row.pack(fill='x', pady=2)
        ctk.CTkLabel(row, text=label, width=80, anchor="w", font=("Arial", 12, "bold"), text_color="#1aafff", fg_color="transparent").pack(side="left")
        e = ctk.CTkEntry(row, width=110, font=("Arial",12), fg_color="#181a1b", text_color="#d3d7de", border_color="#1aafff", border_width=2)
        e.insert(0, val)
        e.pack(side="left", padx=4)
        widgets[key] = e
        def on_focus(event, k=key):
            focused_entry.set(k)
        e.bind("<FocusIn>", on_focus)

    # Section: c·∫≠p nh·∫≠t t·ªça ƒë·ªô
    section_coord = ctk.CTkFrame(right, fg_color="#232323", corner_radius=10, border_width=2, border_color="#1aafff")
    section_coord.pack(fill='x', padx=10, pady=(10,6))
    ctk.CTkLabel(section_coord, text="‚öôÔ∏è C·∫≠p nh·∫≠t t·ªça ƒë·ªô", font=("Arial", 12, "bold"), 
                text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(0,8), padx=12)

    # D√£y c√°c label v√† entry - ƒë√£ b·ªè 'ƒê√≥ng c∆∞·ª£c'
    for label, key, val in [
        ("N√∫t L·ªöN:", "entry_lon", f"{BTN_LON_POS[0]}, {BTN_LON_POS[1]}"),
        ("N√∫t NH·ªé:", "entry_nho", f"{BTN_NHO_POS[0]}, {BTN_NHO_POS[1]}"),
        ("√î BET:", "entry_bet", f"{BET_BOX_POS[0]}, {BET_BOX_POS[1]}"),
        ("N√∫t G·ª¨I:", "entry_gui", f"{BTN_GUI_POS[0]}, {BTN_GUI_POS[1]}"),
        ("Telegram:", "entry_tele", f"{TELE_CLICK_POS[0]}, {TELE_CLICK_POS[1]}"),
        ("V√πng s·ªë ti·ªÅn:", "entry_amount", f"{AMOUNT_REGION[0]}, {AMOUNT_REGION[1]}, {AMOUNT_REGION[2]}, {AMOUNT_REGION[3]}"),
    ]:
        row = ctk.CTkFrame(section_coord, fg_color="transparent")
        row.pack(fill='x', padx=12, pady=(0,6))
        lbl = ctk.CTkLabel(row, text=label, width=110, anchor="w", font=("Arial", 12, "bold"), text_color="#1aafff", fg_color="transparent")
        lbl.pack(side="left")
        e = ctk.CTkEntry(row, width=190, font=("Arial",12), fg_color="#181a1b",
                        text_color="#d3d7de", border_color="#1aafff", border_width=2)
        e.insert(0, val)
        e.pack(side="left", padx=(8,0))
        widgets[key] = e
        def on_focus_factory(k):
            def on_focus(event):
                focused_entry.set(k)
            return on_focus
        e.bind("<FocusIn>", on_focus_factory(key))

    # Container cho c√°c n√∫t
    btn_container = ctk.CTkFrame(section_coord, fg_color="transparent")
    btn_container.pack(pady=7)
    
    btn_pick = ctk.CTkButton(btn_container, text="üìç G√°n t·ªça ƒë·ªô (2s)", width=100, font=("Arial", 12), fg_color="#0066cc",
        command=lambda: pick_position(focused_entry, widgets, status_var, root))
    btn_pick.pack(side="left", padx=5)
    
    # N√∫t ri√™ng ƒë·ªÉ ch·ªçn v√πng cho AMOUNT_REGION
    def pick_region():
        def capture_region():
            try:
                # L·∫•y ƒëi·ªÉm ƒë·∫ßu ti√™n (g√≥c tr√™n tr√°i)
                messagebox.showinfo("B∆∞·ªõc 1/2", "Di chu·ªôt ƒë·∫øn g√≥c TR√äN B√äN TR√ÅI v√πng s·ªë ti·ªÅn\nNh·∫•n OK v√† ƒë·ª£i 2 gi√¢y")
                root.update()
                time.sleep(2)
                pos1 = pyautogui.position()
                
                # L·∫•y ƒëi·ªÉm th·ª© hai (g√≥c d∆∞·ªõi ph·∫£i)
                messagebox.showinfo("B∆∞·ªõc 2/2", "Di chu·ªôt ƒë·∫øn g√≥c D∆Ø·ªöI B√äN PH·∫¢I v√πng s·ªë ti·ªÅn\nNh·∫•n OK v√† ƒë·ª£i 2 gi√¢y")
                root.update()
                time.sleep(2)
                pos2 = pyautogui.position()
                
                x = min(pos1.x, pos2.x)
                y = min(pos1.y, pos2.y)
                width = abs(pos2.x - pos1.x)
                height = abs(pos2.y - pos1.y)
                
                widgets["entry_amount"].delete(0, tk.END)
                widgets["entry_amount"].insert(0, f"{x}, {y}, {width}, {height}")
                messagebox.showinfo("Ho√†n th√†nh", f"V√πng s·ªë ti·ªÅn: x={x}, y={y}, width={width}, height={height}")
                status_var.set(f"üìç ƒê√£ ch·ªçn v√πng s·ªë ti·ªÅn: ({x}, {y}, {width}, {height})")
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·ªçn v√πng: {e}")
        
        # Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng ch·∫∑n UI
        threading.Thread(target=capture_region, daemon=True).start()
    
    btn_pick_region = ctk.CTkButton(btn_container, text="üìê Ch·ªçn v√πng s·ªë ti·ªÅn", width=120, font=("Arial", 12), fg_color="#0066cc",
        command=pick_region)
    btn_pick_region.pack(side="left", padx=5)

    # --- Section: c·∫•u h√¨nh th·ªùi gian ch·ªù ---
    section_delay = ctk.CTkFrame(right, fg_color="#232323", corner_radius=10, border_width=2, border_color="#1aafff")
    section_delay.pack(fill='x', padx=10, pady=(0,6))
    ctk.CTkLabel(section_delay, text="‚è± C·∫•u h√¨nh th·ªùi gian ch·ªù", font=("Arial", 12, "bold"),
                text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(0,0), padx=12)

    # Sau khi c∆∞·ª£c (s)
    row_bet = ctk.CTkFrame(section_delay, fg_color="transparent")
    row_bet.pack(fill='x', padx=12, pady=(6,4))
    ctk.CTkLabel(row_bet, text="Sau khi c∆∞·ª£c (s):", width=140, anchor="w", font=("Arial", 12),
                text_color="#d3d7de", fg_color="transparent").pack(side="left")
    entry_bet = ctk.CTkEntry(row_bet, width=110, font=("Arial",12),
                            fg_color="#181a1b", text_color="#d3d7de",
                            border_color="#1aafff", border_width=2)
    entry_bet.insert(0, str(DELAY_AFTER_BET))
    entry_bet.pack(side="left", padx=(8,0))
    widgets["var_delay_bet"] = entry_bet

    # Sau khi th·∫Øng ch·ªù (s)
    row_win = ctk.CTkFrame(section_delay, fg_color="transparent")
    row_win.pack(fill='x', padx=12, pady=(0,6))
    ctk.CTkLabel(row_win, text="Sau khi th·∫Øng ch·ªù (s):", width=140, anchor="w", font=("Arial", 12),
                text_color="#d3d7de", fg_color="transparent").pack(side="left")
    entry_win = ctk.CTkEntry(row_win, width=110, font=("Arial",12),
                            fg_color="#181a1b", text_color="#d3d7de",
                            border_color="#1aafff", border_width=2)
    entry_win.insert(0, str(DELAY_AFTER_WIN_WAIT))
    entry_win.pack(side="left", padx=(8,0))
    widgets["var_delay_win"] = entry_win

    # Section: Telegram Notifications
    section_telegram = ctk.CTkFrame(right, fg_color="#232323", corner_radius=10, border_width=2, border_color="#1aafff")
    section_telegram.pack(fill='x', padx=10, pady=(0,6))
    ctk.CTkLabel(section_telegram, text="üì± Th√¥ng b√°o Telegram", font=("Arial", 12, "bold"), text_color="#1aafff", fg_color="transparent").pack(anchor='w', pady=(0,8), padx=12)
    
    # Telegram Bot Token
    row_token = ctk.CTkFrame(section_telegram, fg_color="transparent")
    row_token.pack(fill='x', padx=12, pady=(0,4))
    ctk.CTkLabel(row_token, text="Bot Token:", width=100, anchor="w", font=("Arial", 12), text_color="#d3d7de", fg_color="transparent").pack(side="left")
    entry_token = ctk.CTkEntry(row_token, width=280, font=("Arial",12), fg_color="#181a1b", text_color="#d3d7de", border_color="#1aafff", border_width=2, show="*")
    entry_token.insert(0, telegram_notifier.config.get("bot_token", ""))
    entry_token.pack(side="left", padx=(8,0))
    widgets["entry_token"] = entry_token
    
    # Telegram Chat ID
    row_chat = ctk.CTkFrame(section_telegram, fg_color="transparent")
    row_chat.pack(fill='x', padx=12, pady=(0,4))
    ctk.CTkLabel(row_chat, text="Chat ID:", width=100, anchor="w", font=("Arial", 12), text_color="#d3d7de", fg_color="transparent").pack(side="left")
    entry_chat = ctk.CTkEntry(row_chat, width=280, font=("Arial",12), fg_color="#181a1b", text_color="#d3d7de", border_color="#1aafff", border_width=2)
    entry_chat.insert(0, telegram_notifier.config.get("chat_id", ""))
    entry_chat.pack(side="left", padx=(8,0))
    widgets["entry_chat"] = entry_chat
    
    # Telegram Enable/Disable
    var_telegram_enabled = ctk.BooleanVar(value=telegram_notifier.config.get("enabled", False))
    ctk.CTkCheckBox(section_telegram, text="B·∫≠t th√¥ng b√°o Telegram", variable=var_telegram_enabled, font=("Arial",12), text_color="#d3d7de").pack(anchor='w', pady=(0,4), padx=12)
    widgets["var_telegram_enabled"] = var_telegram_enabled
    
    # Telegram notification options
    var_notify_start = ctk.BooleanVar(value=telegram_notifier.config.get("notify_on_start", True))
    var_notify_stop = ctk.BooleanVar(value=telegram_notifier.config.get("notify_on_stop", True))
    var_notify_win = ctk.BooleanVar(value=telegram_notifier.config.get("notify_on_win", True))
    var_notify_lose = ctk.BooleanVar(value=telegram_notifier.config.get("notify_on_lose", True))
    var_notify_error = ctk.BooleanVar(value=telegram_notifier.config.get("notify_on_error", True))
    var_notify_balance = ctk.BooleanVar(value=telegram_notifier.config.get("notify_balance_updates", True))
    var_notify_bet = ctk.BooleanVar(value=telegram_notifier.config.get("notify_bet_changes", True))
    
    ctk.CTkCheckBox(section_telegram, text="Th√¥ng b√°o kh·ªüi ƒë·ªông/d·ª´ng bot", variable=var_notify_start, font=("Arial",11), text_color="#d3d7de").pack(anchor='w', pady=(0,2), padx=12)
    ctk.CTkCheckBox(section_telegram, text="Th√¥ng b√°o k·∫øt qu·∫£ th·∫Øng/thua", variable=var_notify_win, font=("Arial",11), text_color="#d3d7de").pack(anchor='w', pady=(0,2), padx=12)
    ctk.CTkCheckBox(section_telegram, text="Th√¥ng b√°o thay ƒë·ªïi h·ªá s·ªë", variable=var_notify_bet, font=("Arial",11), text_color="#d3d7de").pack(anchor='w', pady=(0,2), padx=12)
    ctk.CTkCheckBox(section_telegram, text="Th√¥ng b√°o c·∫≠p nh·∫≠t s·ªë d∆∞", variable=var_notify_balance, font=("Arial",11), text_color="#d3d7de").pack(anchor='w', pady=(0,2), padx=12)
    ctk.CTkCheckBox(section_telegram, text="Th√¥ng b√°o l·ªói", variable=var_notify_error, font=("Arial",11), text_color="#d3d7de").pack(anchor='w', pady=(0,4), padx=12)
    
    widgets["var_notify_start"] = var_notify_start
    widgets["var_notify_stop"] = var_notify_stop
    widgets["var_notify_win"] = var_notify_win
    widgets["var_notify_lose"] = var_notify_lose
    widgets["var_notify_error"] = var_notify_error
    widgets["var_notify_balance"] = var_notify_balance
    widgets["var_notify_bet"] = var_notify_bet
    
    # Telegram buttons
    telegram_btn_frame = ctk.CTkFrame(section_telegram, fg_color="transparent")
    telegram_btn_frame.pack(pady=4)
    
    btn_test_telegram = ctk.CTkButton(telegram_btn_frame, text="üß™ Test Telegram", width=120, font=("Arial", 12), fg_color="#0066cc",
        command=lambda: test_telegram_connection(widgets, status_var))
    btn_test_telegram.pack(side="left", padx=5)
    
    btn_save_telegram = ctk.CTkButton(telegram_btn_frame, text="üíæ L∆∞u Telegram", width=120, font=("Arial", 12), fg_color="#0066cc",
        command=lambda: save_telegram_config(widgets, status_var))
    btn_save_telegram.pack(side="left", padx=5)


    # --- B·ªë tr√≠ n√∫t control ---
    for i, btn in enumerate([btn_start, btn_pause, btn_resume]):
        btn.grid(row=0, column=i, padx=4, pady=2)
    btn_log.grid(row=1, column=0, padx=4, pady=2)
    btn_save.grid(row=1, column=1, padx=4, pady=2)
    btn_stop.grid(row=1, column=2, padx=4, pady=2)

    # N√∫t Tho√°t xu·ªëng d√≤ng ri√™ng
    ctrl_exit = ctk.CTkFrame(left, fg_color="transparent")
    ctrl_exit.pack(pady=2, padx=12, anchor='w')
    btn_exit = ctk.CTkButton(ctrl_exit, text="‚úò Tho√°t", width=BTN_WIDTH*3+24, font=("Arial", 12), fg_color="#b22222", hover_color="#d33", command=root.destroy)
    btn_exit.pack(fill='x')
    # Load config.json on startup if exists so the GUI uses the saved file immediately.
    if os.path.exists(DEFAULT_CONFIG):
        load_config_from(DEFAULT_CONFIG, widgets, status_var)
    else:
        status_var.set("‚öôÔ∏è S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh (ch∆∞a c√≥ config.json)")

    root.mainloop()

if __name__ == "__main__":
    main_gui()